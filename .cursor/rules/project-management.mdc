---
description: FigmaikR 프로젝트 관리 가이드
globs: 
alwaysApply: false
---
# FigmaikR Project Management Guide

## Project Overview

FigmaikR is a design system toolkit that supports bidirectional conversion between Tailwind CSS and Figma.

### Key Components

- **packages/cssma**: Core library (NPM package)
- **apps/cssma-plugin**: Figma plugin
- **apps/figmai-landing**: Landing page
- **docs/**: Documentation

## Development Workflow

### 1. Version Management (Changeset)

All package changes are managed through Changeset.

```bash
# Add new changes
pnpm changeset

# Check current changeset status
pnpm changeset:status

# Update versions (for local testing)
pnpm changeset:version

# Deploy packages (automatically executed in CI)
pnpm release
```

#### Changeset Type Guide

- **patch**: Bug fixes, documentation updates, internal refactoring
- **minor**: New feature additions, API extensions
- **major**: Breaking changes

### 2. Automated Deployment System

Fully automated deployment pipeline through GitHub Actions:

1. **main branch push** → GitHub Actions trigger
2. **Changeset detection** → Automatic release PR creation
3. **PR merge** → NPM deployment + GitHub release creation

#### Deployment Related Files

- [.github/workflows/release.yml](mdc:.github/workflows/release.yml): Automated deployment workflow
- [.changeset/config.json](mdc:.changeset/config.json): Changeset configuration
- [package.json](mdc:package.json): Root package configuration

### 3. Package Structure

#### Core Library (packages/cssma)

```typescript
// Main entry points
import { processCssStyles, figmaToCss } from 'cssma';

// Style conversion
const figmaStyles = processCssStyles('flex-col w-full bg-blue-500');
const tailwindClasses = figmaToCss(figmaNode);
```

Key files:
- [packages/cssma/src/index.ts](mdc:packages/cssma/src/index.ts): Main entry point
- [packages/cssma/package.json](mdc:packages/cssma/package.json): Package configuration
- [packages/cssma/CHANGELOG.md](mdc:packages/cssma/CHANGELOG.md): Change log

#### Figma Plugin (apps/cssma-plugin)

Figma plugin with real-time CSS preview system:

Key components:
- [apps/cssma-plugin/src/components/CssConverter.tsx](mdc:apps/cssma-plugin/src/components/CssConverter.tsx): CSS converter
- [apps/cssma-plugin/src/components/LivePreview.tsx](mdc:apps/cssma-plugin/src/components/LivePreview.tsx): Real-time preview
- [apps/cssma-plugin/src/hooks/useLocalStorage.ts](mdc:apps/cssma-plugin/src/hooks/useLocalStorage.ts): Local storage hook

## Coding Standards

### 1. TypeScript Usage

All new code is written in TypeScript with strict type checking applied.

```typescript
// Good example: Clear type definition
interface FigmaStyleProps {
  layoutMode?: 'HORIZONTAL' | 'VERTICAL';
  fills?: Paint[];
  cornerRadius?: number;
}

// Bad example: Using any type
function processStyles(styles: any): any {
  // ...
}
```

### 2. Component Structure

React components follow this structure:

```typescript
// 1. Imports
import React, { useState, useEffect } from 'react';
import { processCssStyles } from 'cssma';

// 2. Type definitions
interface ComponentProps {
  className?: string;
  onStyleChange?: (styles: string) => void;
}

// 3. Component definition
export const Component: React.FC<ComponentProps> = ({
  className,
  onStyleChange
}) => {
  // 4. State and hooks
  const [styles, setStyles] = useState('');
  
  // 5. Event handlers
  const handleChange = (value: string) => {
    setStyles(value);
    onStyleChange?.(value);
  };
  
  // 6. Rendering
  return (
    <div className={className}>
      {/* Component content */}
    </div>
  );
};
```

### 3. Error Handling

All asynchronous operations and external API calls must include proper error handling:

```typescript
try {
  const result = await processCssStyles(cssString);
  setStyles(result);
} catch (error) {
  console.error('Style processing failed:', error);
  setError('An error occurred while processing styles.');
}
```

## Testing Strategy

### 1. Unit Testing

Write unit tests for each utility function and component:

```bash
# Run tests
pnpm test

# Test coverage
pnpm test:coverage

# Test UI
pnpm test:ui
```

### 2. Integration Testing

For Figma plugins, include integration tests with actual Figma API.

## Documentation

### 1. README Updates

Update the corresponding package's README.md when adding new features:

- [README.md](mdc:README.md): Overall project overview
- [packages/cssma/README.md](mdc:packages/cssma/README.md): Library usage
- [apps/cssma-plugin/README.md](mdc:apps/cssma-plugin/README.md): Plugin usage

### 2. API Documentation

Auto-generate API documentation through TypeScript type definitions and JSDoc comments.

```typescript
/**
 * Converts Tailwind CSS classes to Figma styles.
 * 
 * @param cssClasses - Tailwind CSS class string to convert
 * @returns Figma style object
 * 
 * @example
 * ```typescript
 * const styles = processCssStyles('flex-col w-full bg-blue-500');
 * node.layoutMode = styles.layout.layoutMode;
 * ```
 */
export function processCssStyles(cssClasses: string): FigmaStyles {
  // Implementation
}
```

## Performance Optimization

### 1. Bundle Size Optimization

- Use ES modules for tree shaking
- Remove unnecessary dependencies
- Apply code splitting

### 2. Runtime Performance

- Real-time update optimization through debouncing (300ms)
- Prevent duplicate calculations through memoization
- Handle large data through virtualization

## Security Considerations

### 1. Dependency Management

```bash
# Security vulnerability check
pnpm audit

# Dependency updates
pnpm update
```

### 2. Environment Variables

Manage sensitive information through environment variables and provide `.env.example` file.

## Deployment Checklist

Pre-release verification items:

- [ ] All tests pass
- [ ] Type checking passes
- [ ] Lint checking passes
- [ ] Documentation updated
- [ ] Changeset created
- [ ] Breaking changes verified
- [ ] Performance testing completed

## Troubleshooting

### 1. Common Issues

#### Changeset PR not being created
- Check GitHub Actions permissions
- Verify GITHUB_TOKEN and NPM_TOKEN secrets
- Create manual PR and merge

#### Build failure
- Check pnpm version (v9 recommended)
- Reinstall dependencies: `pnpm install --no-frozen-lockfile`
- Check type errors

#### Figma plugin load failure
- Check manifest.json configuration
- Verify build output file paths
- Enable Figma developer mode

### 2. Debugging Tools

```bash
# Build with verbose logs
pnpm build --verbose

# Run development server
pnpm dev

# Run type checking only
pnpm type-check
```

## Contribution Guidelines

1. **Issue Creation**: Create GitHub issues for bug reports or feature requests
2. **Branch Strategy**: Create branches in `feature/feature-name` or `fix/bug-name` format
3. **Commit Messages**: Use Conventional Commits format
4. **PR Template**: Utilize [.github/pull_request_template.md](mdc:.github/pull_request_template.md)
5. **Changeset Required**: Always create changeset when changing packages

Follow this guide to maintain a consistent and efficient development environment.
