---
description: 개발 워크플로우 및 자동화 가이드, GitHub Actions 워크플로우
globs: 
alwaysApply: false
---
# Development Workflow and Automation Guide

## GitHub Actions Workflows

### 1. Release Automation ([.github/workflows/release.yml](mdc:.github/workflows/release.yml))

Fully automated package deployment system:

```yaml
# Trigger: main branch push
on:
  push:
    branches: [main]

# Key steps:
# 1. Install dependencies (pnpm v9)
# 2. Build packages
# 3. Process changesets
# 4. NPM deployment
# 5. Create GitHub release
```

#### Required Secrets

- `NPM_TOKEN`: NPM deployment token (Automation type)
- `GITHUB_TOKEN`: Auto-provided (for PR creation, release creation)

#### Permission Settings

```yaml
permissions:
  contents: write      # Git tag creation
  pull-requests: write # Release PR creation
  issues: write        # Issue management
```

### 2. Workflow Execution Process

```mermaid
graph TD
    A[main branch push] --> B[GitHub Actions trigger]
    B --> C[Install dependencies]
    C --> D[Build packages]
    D --> E[Check changesets]
    E --> F{Changesets exist?}
    F -->|Yes| G[Create Release PR]
    F -->|No| H[End workflow]
    G --> I[Wait for PR merge]
    I --> J[PR merged]
    J --> K[NPM deployment]
    K --> L[Create GitHub release]
    K --> M[Create Git tags]
```

## Changeset Management

### 1. Configuration File ([.changeset/config.json](mdc:.changeset/config.json))

```json
{
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": ["figmai-landing", "cssma-plugin"],
  "snapshot": {
    "useCalculatedVersion": true
  }
}
```

#### Key Configuration Explanations

- `ignore`: Packages not to deploy (private packages)
- `updateInternalDependencies`: Internal dependency update method
- `snapshot`: Snapshot version calculation method

### 2. Changeset Creation Guide

```bash
# Interactive changeset creation
pnpm changeset

# Selection process:
# 1. Select changed packages (cssma)
# 2. Select change type (patch/minor/major)
# 3. Write change summary
# 4. Confirm and create
```

#### Change Type Criteria

| Type | When to Use | Example |
|------|-------------|---------|
| **patch** | Bug fixes, documentation updates | 0.1.1 → 0.1.2 |
| **minor** | New feature additions | 0.1.1 → 0.2.0 |
| **major** | Breaking changes | 0.1.1 → 1.0.0 |

### 3. Changeset File Structure

```markdown
---
"cssma": patch
---

Add real-time CSS preview system

- Implement LivePreview component
- Apply 300ms debouncing
- Add error handling and loading states
```

## Package Management

### 1. Monorepo Structure

```
packages/
  cssma/           # Core library (deployed)
apps/
  cssma-plugin/    # Figma plugin (not deployed)
  figmai-landing/  # Landing page (not deployed)
```

### 2. Dependency Management

#### Root package.json Scripts

```json
{
  "scripts": {
    "changeset": "changeset",
    "changeset:version": "changeset version",
    "changeset:publish": "changeset publish",
    "changeset:status": "changeset status",
    "release": "pnpm build && pnpm changeset:publish",
    "build": "pnpm --filter cssma build",
    "build:all": "pnpm -r build"
  }
}
```

#### pnpm Workspace Configuration

```yaml
# pnpm-workspace.yaml
packages:
  - 'packages/*'
  - 'apps/*'
```

### 3. Build Optimization

```bash
# Build specific package only (for deployment)
pnpm --filter cssma build

# Build all (for development)
pnpm build:all

# Parallel build
pnpm -r --parallel build
```

## Version Management Strategy

### 1. Semantic Versioning

```
MAJOR.MINOR.PATCH
  |     |     |
  |     |     └─ Bug fixes
  |     └─ New features (backward compatible)
  └─ Breaking changes
```

### 2. Branch Strategy

```
main                 # Stable version, auto-deploy
├── feature/xxx      # New feature development
├── fix/xxx          # Bug fixes
└── changeset-release/main  # Auto-generated release branch
```

### 3. Tag Management

```bash
# Auto-generated tag format
v0.1.0, v0.1.1, v0.1.2, ...

# Check tags
git tag -l

# Checkout to specific tag
git checkout v0.1.2
```

## Automation Troubleshooting

### 1. GitHub Actions Failure Causes

#### NPM Deployment Failure
```bash
# Cause: NPM_TOKEN expired or incorrect configuration
# Solution: Generate new token in NPM and update GitHub Secrets
```

#### PR Creation Failure
```bash
# Cause: Insufficient GitHub Actions permissions
# Solution: Manual PR creation or use PAT
```

#### Build Failure
```bash
# Cause: pnpm version mismatch
# Solution: Ensure pnpm v9 usage in GitHub Actions
```

### 2. Common Solutions

```bash
# 1. Test build locally
pnpm install --no-frozen-lockfile
pnpm build

# 2. Check changeset status
pnpm changeset:status

# 3. Manual version update (for testing)
pnpm changeset:version

# 4. Clear dependency cache
pnpm store prune
```

### 3. Monitoring and Notifications

#### GitHub Actions Status Check
- Monitor workflow execution status in Actions tab
- Automatic email notifications on failure

#### NPM Package Status
```bash
# Check latest version
npm view cssma version

# Deployment history
npm view cssma versions --json
```

## Development Environment Setup

### 1. Local Development Environment

```bash
# 1. Clone repository
git clone https://github.com/easylogic/cssma.git
cd cssma

# 2. Install dependencies
pnpm install

# 3. Run development server
pnpm dev

# 4. Run tests
pnpm test
```

### 2. Environment Variables

```bash
# .env.local (for local development)
NODE_ENV=development
FIGMA_ACCESS_TOKEN=your_token_here

# GitHub Secrets (for deployment)
NPM_TOKEN=npm_xxx
GITHUB_TOKEN=ghp_xxx (auto-provided)
```

### 3. IDE Configuration

#### VSCode Recommended Extensions

```json
{
  "recommendations": [
    "ms-vscode.vscode-typescript-next",
    "bradlc.vscode-tailwindcss",
    "esbenp.prettier-vscode",
    "ms-playwright.playwright"
  ]
}
```

## Performance Monitoring

### 1. Build Performance

```bash
# Measure build time
time pnpm build

# Bundle size analysis
pnpm build --analyze
```

### 2. Deployment Performance

- Monitor GitHub Actions execution time
- Track NPM deployment success rate
- Optimize dependency installation time

Follow this guide to maintain a stable and efficient development workflow.
