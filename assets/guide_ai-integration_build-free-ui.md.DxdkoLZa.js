import{_ as t,C as p,c as r,o as n,j as a,b as h,a2 as k,a as i,w as e,G as d,a3 as c}from"./chunks/framework.C0Fyqt99.js";const C=JSON.parse('{"title":"Build-free UI Generation","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ai-integration/build-free-ui.md","filePath":"guide/ai-integration/build-free-ui.md"}'),o={name:"guide/ai-integration/build-free-ui.md"};function E(g,s,y,u,m,b){const l=p("Mermaid");return n(),r("div",null,[s[1]||(s[1]=a("h1",{id:"build-free-ui-generation",tabindex:"-1"},[i("Build-free UI Generation "),a("a",{class:"header-anchor",href:"#build-free-ui-generation","aria-label":'Permalink to "Build-free UI Generation"'},"​")],-1)),s[2]||(s[2]=a("p",null,"BaroCSS enables true build-free UI generation by processing CSS classes in real-time as they're dynamically added to the DOM. This makes it perfect for AI-driven development where UI components are generated on-demand without any compilation step.",-1)),s[3]||(s[3]=a("h2",{id:"how-build-free-works",tabindex:"-1"},[i("How Build-free Works "),a("a",{class:"header-anchor",href:"#how-build-free-works","aria-label":'Permalink to "How Build-free Works"'},"​")],-1)),s[4]||(s[4]=a("p",null,"Unlike traditional utility-first frameworks that require a build step to scan and generate CSS, BaroCSS processes classes at runtime:",-1)),(n(),h(c,null,{default:e(()=>[d(l,{id:"mermaid-12",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20%20%20participant%20AI%20as%20AI%20Agent%0A%20%20%20%20participant%20App%20as%20Application%0A%20%20%20%20participant%20DOM%20as%20DOM%0A%20%20%20%20participant%20BaroCSS%20as%20BaroCSS%20Engine%0A%20%20%20%20participant%20CSS%20as%20CSS%20Output%0A%0A%20%20%20%20AI-%3E%3EApp%3A%20Generate%20component%20with%20classes%0A%20%20%20%20App-%3E%3EDOM%3A%20Add%20elements%20with%20utility%20classes%0A%20%20%20%20DOM-%3E%3EBaroCSS%3A%20Trigger%20MutationObserver%0A%20%20%20%20BaroCSS-%3E%3EBaroCSS%3A%20Parse%20new%20classes%20incrementally%0A%20%20%20%20BaroCSS-%3E%3ECSS%3A%20Generate%20CSS%20rules%20instantly%0A%20%20%20%20CSS-%3E%3EDOM%3A%20Apply%20styles%20immediately%0A%20%20%20%20DOM-%3E%3EApp%3A%20UI%20renders%20with%20new%20styles%0A"})]),fallback:e(()=>[...s[0]||(s[0]=[i(" Loading... ",-1)])]),_:1})),s[5]||(s[5]=k(`<h2 id="key-benefits" tabindex="-1">Key Benefits <a class="header-anchor" href="#key-benefits" aria-label="Permalink to &quot;Key Benefits&quot;">​</a></h2><h3 id="_1-zero-build-time" tabindex="-1">1. Zero Build Time <a class="header-anchor" href="#_1-zero-build-time" aria-label="Permalink to &quot;1. Zero Build Time&quot;">​</a></h3><p>No compilation or build process required. CSS is generated instantly as classes are discovered.</p><h3 id="_2-dynamic-class-support" tabindex="-1">2. Dynamic Class Support <a class="header-anchor" href="#_2-dynamic-class-support" aria-label="Permalink to &quot;2. Dynamic Class Support&quot;">​</a></h3><p>Full support for arbitrary values and computed classes that would be impossible to detect at build time.</p><h3 id="_3-incremental-processing" tabindex="-1">3. Incremental Processing <a class="header-anchor" href="#_3-incremental-processing" aria-label="Permalink to &quot;3. Incremental Processing&quot;">​</a></h3><p>Only new or changed classes are processed, ensuring optimal performance.</p><h3 id="_4-memory-efficient" tabindex="-1">4. Memory Efficient <a class="header-anchor" href="#_4-memory-efficient" aria-label="Permalink to &quot;4. Memory Efficient&quot;">​</a></h3><p>Smart caching system prevents redundant processing of previously seen classes.</p><h2 id="real-time-class-processing" tabindex="-1">Real-time Class Processing <a class="header-anchor" href="#real-time-class-processing" aria-label="Permalink to &quot;Real-time Class Processing&quot;">​</a></h2><p>When AI generates new components, BaroCSS automatically detects and processes them:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AI generates this component dynamically</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aiComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;div class=&quot;w-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dynamicWidth</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px] h-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calculatedHeight</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}rem] </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              bg-gradient-to-r from-[#\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">colorValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}] to-[#\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endColor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              transform rotate-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}deg] scale-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scaleFactor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              shadow-[0_\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shadowY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px_\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shadowBlur</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px_rgba(0,0,0,\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opacity</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              hover:scale-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hoverScale</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}] transition-all duration-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms]&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;p class=&quot;text-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fontSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px] leading-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lineHeight</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}] </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              font-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fontWeight</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}] tracking-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">letterSpacing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}em]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              text-[#\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">textColor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}] p-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">padding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px]&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiGeneratedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BaroCSS automatically processes these classes when added to DOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiComponent;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSS is generated instantly, no build step needed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="performance-characteristics" tabindex="-1">Performance Characteristics <a class="header-anchor" href="#performance-characteristics" aria-label="Permalink to &quot;Performance Characteristics&quot;">​</a></h2><h3 id="smart-caching-layers" tabindex="-1">Smart Caching Layers <a class="header-anchor" href="#smart-caching-layers" aria-label="Permalink to &quot;Smart Caching Layers&quot;">​</a></h3><p>BaroCSS employs multiple caching layers to ensure optimal performance:</p><ol><li><strong>AST Cache</strong>: Parsed abstract syntax trees</li><li><strong>Parse Result Cache</strong>: Processed class results</li><li><strong>Utility Cache</strong>: Generated CSS utilities</li><li><strong>Failure Cache</strong>: Invalid classes (prevents reprocessing)</li></ol><h3 id="memory-management" tabindex="-1">Memory Management <a class="header-anchor" href="#memory-management" aria-label="Permalink to &quot;Memory Management&quot;">​</a></h3><p>The engine automatically manages memory by:</p><ul><li>Limiting cache sizes</li><li>Using LRU (Least Recently Used) eviction</li><li>Garbage collecting unused entries</li></ul><h3 id="processing-speed" tabindex="-1">Processing Speed <a class="header-anchor" href="#processing-speed" aria-label="Permalink to &quot;Processing Speed&quot;">​</a></h3><ul><li><strong>Initial Parse</strong>: ~0.1ms per class</li><li><strong>Cached Lookup</strong>: ~0.01ms per class</li><li><strong>DOM Mutation</strong>: ~1ms for 100 new classes</li></ul><h2 id="framework-integration" tabindex="-1">Framework Integration <a class="header-anchor" href="#framework-integration" aria-label="Permalink to &quot;Framework Integration&quot;">​</a></h2><p>Build-free UI generation works seamlessly with any framework:</p><ul><li><strong>Vanilla HTML/JS</strong>: Direct DOM manipulation</li><li><strong>React</strong>: Component state updates</li><li><strong>Vue</strong>: Reactive data changes</li><li><strong>Svelte</strong>: Store updates</li><li><strong>SolidJS</strong>: Signal changes</li><li><strong>jQuery</strong>: Dynamic content insertion</li></ul><h2 id="ai-integration-patterns" tabindex="-1">AI Integration Patterns <a class="header-anchor" href="#ai-integration-patterns" aria-label="Permalink to &quot;AI Integration Patterns&quot;">​</a></h2><h3 id="pattern-1-direct-component-generation" tabindex="-1">Pattern 1: Direct Component Generation <a class="header-anchor" href="#pattern-1-direct-component-generation" aria-label="Permalink to &quot;Pattern 1: Direct Component Generation&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AI generates complete components</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aiResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // BaroCSS processes these classes automatically</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;div class=&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">containerClasses</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;h2 class=&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">titleClasses</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/h2&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;p class=&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentClasses</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="pattern-2-style-modification" tabindex="-1">Pattern 2: Style Modification <a class="header-anchor" href="#pattern-2-style-modification" aria-label="Permalink to &quot;Pattern 2: Style Modification&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AI modifies existing styles</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modifyElementStyles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instruction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.className;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modifyClasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentClasses, instruction);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // BaroCSS automatically handles the class changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newClasses;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="pattern-3-partial-updates" tabindex="-1">Pattern 3: Partial Updates <a class="header-anchor" href="#pattern-3-partial-updates" aria-label="Permalink to &quot;Pattern 3: Partial Updates&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AI updates specific style properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateProperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aiClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(property, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Add new classes while keeping existing ones</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiClasses.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="_1-use-specific-arbitrary-values" tabindex="-1">1. Use Specific Arbitrary Values <a class="header-anchor" href="#_1-use-specific-arbitrary-values" aria-label="Permalink to &quot;1. Use Specific Arbitrary Values&quot;">​</a></h3><p>Instead of generic classes, use specific arbitrary values for AI-generated content:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good: Specific values</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`w-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exactWidth</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px] h-[\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exactHeight</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px]\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Avoid: Generic values that might not match intent</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`w-64 h-32\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-leverage-complex-arbitrary-values" tabindex="-1">2. Leverage Complex Arbitrary Values <a class="header-anchor" href="#_2-leverage-complex-arbitrary-values" aria-label="Permalink to &quot;2. Leverage Complex Arbitrary Values&quot;">​</a></h3><p>Take advantage of BaroCSS&#39;s full CSS value support:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Complex gradients</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`bg-[linear-gradient(45deg,_#ff0000_0%,_#00ff00_50%,_#0000ff_100%)]\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Complex shadows</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`shadow-[inset_0_1px_0_rgba(255,255,255,0.1),_0_1px_3px_rgba(0,0,0,0.3)]\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Complex transforms</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`transform-[rotate(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">angle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}deg)_scale(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scale</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})_translateX(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px)]\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-batch-dom-changes" tabindex="-1">3. Batch DOM Changes <a class="header-anchor" href="#_3-batch-dom-changes" aria-label="Permalink to &quot;3. Batch DOM Changes&quot;">​</a></h3><p>When adding multiple elements, batch them for better performance:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good: Batch changes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiComponents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElementFromHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(component));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Avoid: Individual insertions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aiComponents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElementFromHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(component));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-cache-ai-responses" tabindex="-1">4. Cache AI Responses <a class="header-anchor" href="#_4-cache-ai-responses" aria-label="Permalink to &quot;4. Cache AI Responses&quot;">​</a></h3><p>Cache frequently used AI-generated styles to reduce API calls:</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> styleCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCachedStyle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (styleCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styleCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt, style);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> style;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/guide/ai-integration/vanilla-html.html">Vanilla HTML Implementation</a></li><li><a href="/guide/ai-integration/react.html">React Integration</a></li><li><a href="/guide/ai-integration/vue.html">Vue Integration</a></li><li><a href="/guide/ai-integration/partial-updates.html">Partial UI Updates</a></li></ul>`,46))])}const A=t(o,[["render",E]]);export{C as __pageData,A as default};
