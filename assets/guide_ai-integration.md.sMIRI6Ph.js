import{_ as t,C as l,c as p,o as a,a2 as i,b as r,w as n,a as h,G as k,a3 as d}from"./chunks/framework.C0Fyqt99.js";const y=JSON.parse('{"title":"AI Integration","description":"How to connect AI-generated UI with BaroCSS for real-time rendering","frontmatter":{"title":"AI Integration","description":"How to connect AI-generated UI with BaroCSS for real-time rendering"},"headers":[],"relativePath":"guide/ai-integration.md","filePath":"guide/ai-integration.md"}'),o={name:"guide/ai-integration.md"};function c(g,s,E,u,m,b){const e=l("Mermaid");return a(),p("div",null,[s[1]||(s[1]=i('<h1 id="ai-integration" tabindex="-1">AI Integration <a class="header-anchor" href="#ai-integration" aria-label="Permalink to &quot;AI Integration&quot;">​</a></h1><p>BaroCSS enables real-time rendering of AI-generated UI without any build steps. This guide explains the typical flow (AI → DOM → BaroCSS) and shows minimal code to get it working.</p><h2 id="flow-overview" tabindex="-1">Flow Overview <a class="header-anchor" href="#flow-overview" aria-label="Permalink to &quot;Flow Overview&quot;">​</a></h2><ul><li>AI generates markup using utility-first classes (Tailwind syntax supported)</li><li>Your app injects the markup into the DOM</li><li>BaroCSS observes DOM changes and generates CSS in real time</li></ul><h2 id="diagram" tabindex="-1">Diagram <a class="header-anchor" href="#diagram" aria-label="Permalink to &quot;Diagram&quot;">​</a></h2>',5)),(a(),r(d,null,{default:n(()=>[k(e,{id:"mermaid-29",class:"mermaid my-class",graph:"sequenceDiagram%0A%20%20autonumber%0A%20%20participant%20AI%20as%20AI%20Service%20%2F%20LLM%0A%20%20participant%20APP%20as%20App%20(Client)%0A%20%20participant%20DOM%20as%20DOM%0A%20%20participant%20RUNTIME%20as%20BaroCSS%20Runtime%0A%20%20participant%20CSS%20as%20StyleSheet%0A%0A%20%20AI-%3E%3EAPP%3A%20Generate%20UI%20(utility-first%20markup)%0A%20%20APP-%3E%3EDOM%3A%20Insert%2FUpdate%20HTML%0A%20%20activate%20DOM%0A%20%20DOM--%3E%3ERUNTIME%3A%20Mutation%20observed%20(class%20list%20changes)%0A%20%20activate%20RUNTIME%0A%20%20RUNTIME-%3E%3ERUNTIME%3A%20Parse%20classes%20(incl.%20arbitrary%20values)%0A%20%20RUNTIME-%3E%3ECSS%3A%20Generate%2BInject%20CSS%20rules%20(JIT)%0A%20%20deactivate%20RUNTIME%0A%20%20DOM--%3E%3EAPP%3A%20UI%20renders%20instantly%20(no%20build)%0A%20%20deactivate%20DOM%0A%0A%20%20rect%20rgba(59%2C130%2C246%2C0.08)%0A%20%20%20%20note%20over%20AI%2CAPP%3A%20Optional%20streaming%0A%20%20%20%20AI--%3E%3EAPP%3A%20Partial%20UI%20chunks%20(tokens)%0A%20%20%20%20APP-%3E%3EDOM%3A%20Incremental%20updates%0A%20%20%20%20DOM--%3E%3ERUNTIME%3A%20Continuous%20mutations%0A%20%20%20%20RUNTIME-%3E%3ECSS%3A%20Incremental%20CSS%20generation%0A%20%20end%0A"})]),fallback:n(()=>[...s[0]||(s[0]=[h(" Loading... ",-1)])]),_:1})),s[2]||(s[2]=i(`<h2 id="minimal-setup" tabindex="-1">Minimal Setup <a class="header-anchor" href="#minimal-setup" aria-label="Permalink to &quot;Minimal Setup&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BrowserRuntime } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;barocss/runtime/browser&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1) Initialize runtime once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  config: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Optional theme/config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2) Observe the document (scans existing DOM and watches for changes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body, { scan: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="rendering-ai-generated-components" tabindex="-1">Rendering AI-Generated Components <a class="header-anchor" href="#rendering-ai-generated-components" aria-label="Permalink to &quot;Rendering AI-Generated Components&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example: AI returns a component string using Tailwind syntax</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aiComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;div class=&quot;flex items-center justify-between p-[1.5rem] bg-white rounded-[0.75rem]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              shadow-[0_4px_6px_-1px_rgba(0,0,0,0.1)] w-[400px] h-[120px]&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;h2 class=&quot;text-[1.25rem] font-semibold text-gray-800 leading-[1.4]&quot;&gt;AI Generated&lt;/h2&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;button class=&quot;px-[1rem] py-[0.5rem] bg-blue-500 text-white rounded-[0.375rem]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    hover:bg-blue-600 transition-colors duration-[200ms] w-[120px]&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Action</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Insert into the DOM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mount.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiComponent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BaroCSS detects the change and generates CSS instantly (no build step)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="dynamic-arbitrary-values" tabindex="-1">Dynamic Arbitrary Values <a class="header-anchor" href="#dynamic-arbitrary-values" aria-label="Permalink to &quot;Dynamic Arbitrary Values&quot;">​</a></h2><p>AI can emit precise, data-driven styles using arbitrary values, and BaroCSS will parse them in real time:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderAICard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;div class=&quot;bg-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-50 border-l-[4px] border-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-500 p-[1rem]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                rounded-r-[0.5rem] shadow-[0_4px_6px_-1px_rgba(0,0,0,0.1)]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                w-[420px] h-[160px]&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;h3 class=&quot;text-[1rem] font-medium text-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-800 mb-[0.25rem]&quot;&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/h3&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;p class=&quot;text-[0.875rem] text-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-700 leading-[1.5]&quot;&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">description</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>No bundler or rebuild loop is required; styles appear instantly.</li><li>Works with streaming/iterative AI outputs — the runtime continuously observes DOM changes.</li><li>The same approach applies to frameworks (React/Vue/Svelte) when rendering AI content.</li></ul>`,9))])}const A=t(o,[["render",c]]);export{y as __pageData,A as default};
