import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.C0Fyqt99.js";const c=JSON.parse('{"title":"Runtime API","description":"","frontmatter":{},"headers":[],"relativePath":"guide/runtime-api.md","filePath":"guide/runtime-api.md"}'),t={name:"guide/runtime-api.md"};function l(r,s,p,h,o,d){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="runtime-api" tabindex="-1">Runtime API <a class="header-anchor" href="#runtime-api" aria-label="Permalink to &quot;Runtime API&quot;">​</a></h1><p>BaroCSS provides a lightweight runtime for generating and injecting CSS in the browser.</p><h2 id="browserruntime" tabindex="-1">BrowserRuntime <a class="header-anchor" href="#browserruntime" aria-label="Permalink to &quot;BrowserRuntime&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BrowserRuntime } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;barocss/runtime/browser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Config;              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Full BaroCSS config (theme, preflight, etc.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string;             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ID of the style element (default: &#39;barocss-runtime&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  insertionPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;head&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;body&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLElement; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Where to insert style partitions (default: &#39;head&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maxRulesPerPartition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max CSS rules per &lt;style&gt; partition (default: 50)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>config: See Configuration for <code>theme</code>, <code>preflight</code>, and plugins. Preflight values: true | false | &#39;minimal&#39; | &#39;standard&#39; | &#39;full&#39;.</li><li>styleId: Prefix used when creating partitioned style elements.</li><li>insertionPoint: Determines where style tags are appended. You can pass a specific HTMLElement.</li><li>maxRulesPerPartition: Splits rules across multiple <code>&lt;style&gt;</code> tags to avoid large sheets.</li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><ul><li>addClass(classes: string | string[]): Process classes and inject CSS.</li><li>removeClass(classes: string | string[]): Remove classes from runtime cache (does not remove injected CSS).</li><li>getCss(cls: string): Get generated CSS for a single class.</li><li>getAllCss(): Get all CSS currently cached by the runtime.</li><li>getClasses(): Get an array of class names currently cached.</li><li>clearCaches(): Clear runtime, AST, and incremental caches; remove style partitions.</li><li>reset(): Clear runtime caches and style partitions without clearing global caches.</li><li>updateConfig(newConfig: Config): Recreate context and reapply existing classes.</li><li>destroy(): Cleanup style partitions and mark runtime as destroyed.</li><li>getStats(): Retrieve runtime and cache statistics.</li></ul><h3 id="observe" tabindex="-1">observe <a class="header-anchor" href="#observe" aria-label="Permalink to &quot;observe&quot;">​</a></h3><p>The runtime can watch the DOM and automatically process classes.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scan?: boolean;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Perform an initial DOM scan and process existing class attributes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onReady</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Callback invoked after initial scan is applied</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Later</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>scan: When true, runs a synchronous scan to process existing class names immediately before monitoring mutations.</li><li>onReady: Invoked after layout-related results are applied during the initial scan.</li></ul><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>The runtime is browser-only. For Node.js or server-side processing, use the core parser APIs directly.</li><li>Removing a class from the runtime cache does not remove corresponding rules already injected into the DOM.</li></ul>`,15)])])}const u=i(t,[["render",l]]);export{c as __pageData,u as default};
