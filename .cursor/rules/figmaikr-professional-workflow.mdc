---
description: 
globs: 
alwaysApply: true
---
# FigmaikR Professional Multi-Issue Release Workflow

## 🚀 Complete Enterprise-Grade Development Process

### 📋 Workflow Overview

This guide defines the complete professional development workflow for FigmaikR project, supporting multi-issue releases with full automation and traceability.

```mermaid
graph TD
    A[Release Epic Creation] --> A1[Roadmap Review]
    A1 --> A2[TODOS.md Planning]
    A2 --> A3[Stakeholder Communication]
    A3 --> B[Feature Issues Creation]
    B --> B1[Technical Feasibility Check]
    B1 --> C[Feature Branch Creation]
    C --> D[Code Development & Testing]
    D --> D1[Quality Gates Check]
    D1 --> E[Changeset Creation]
    E --> F[Commit & Push]
    F --> G[Feature PR Creation]
    G --> H[Code Review & Merge]
    H --> I[Issue Auto-Close]
    I --> I1[Update TODOS.md]
    I1 --> J[GitHub Actions: Auto Version PR]
    J --> K[Version PR Review & Merge]
    K --> L[Additional Features?]
    L -->|Yes| C
    L -->|No| M[Release Readiness Check]
    M --> N[develop → main PR]
    N --> O[Release Epic Link]
    O --> P[Production Merge]
    P --> Q[Auto NPM Deployment]
    Q --> R[Release Announcement]
    R --> S[Post-Release Monitoring]
    S --> T[Feedback Collection]
    T --> U[Success Metrics Analysis]
    U --> V[ROADMAP.md Update]
    V --> W[Continuous Improvement]
    
    S --> S1[Critical Issues?]
    S1 -->|Yes| S2[Hotfix Process]
    S1 -->|No| T
    S2 --> S3[Emergency Release]
    S3 --> S
```

## 🎯 Phase 1: Release Planning & Setup

### 1️⃣ Release Epic Issue Creation

**Purpose**: Central coordination and tracking for multi-feature releases

**Template Structure**:
```markdown
## 🚀 Release v0.2.0 - [Release Theme]

### 🎯 Release Goals
- Business objective 1
- Technical objective 2
- User experience improvement 3

### 📅 Timeline
- **Planning**: [Date range]
- **Development**: [Date range]
- **QA & Testing**: [Date range]
- **Release**: [Target date]

### ✅ Success Metrics
- Performance improvement: [X%]
- Test coverage: [X%]
- User satisfaction: [Measure]

### 🔧 Features Checklist
- [ ] #42 Advanced Animation System
- [ ] #43 Parser Performance Optimization
- [ ] #44 Enhanced TypeScript Definitions
- [ ] #45 Developer Experience Improvements

### 📊 Progress Tracking
[Update regularly with completion percentages]
```

**GitHub Setup**:
- Labels: `release`, `epic`, `milestone`
- Assignee: Release manager
- Milestone: Create v0.2.0 milestone

### 1️⃣.5️⃣ Roadmap-Based Feature Planning 🗺️

**Purpose**: Ensure features align with strategic roadmap and break down into actionable tasks

**Process**:
1. **Review Current Roadmap Phase**
   - Check [ROADMAP.md](mdc:docs/ROADMAP.md) for current phase priorities
   - Identify features marked for current development cycle
   - Verify alignment with business objectives

2. **Create/Update TODOS.md Checklist**
   - Break down roadmap features into specific, actionable tasks
   - Add technical implementation details
   - Include acceptance criteria and testing requirements
   - Mark dependencies between tasks

3. **Feature Selection & Prioritization**
   - Select features from TODOS.md based on:
     - Roadmap priority level (High/Medium/Low)
     - Technical complexity and effort estimation
     - Team capacity and timeline constraints
     - User impact and business value

**TODOS.md Template Structure**:
```markdown
# FigmaikR Development TODOs

## 🚀 Current Release: v0.3.0 - Advanced Features & Integrations

### 📋 Roadmap Phase 2 Features

#### 🎬 Animation System (High Priority)
- [ ] **Issue #XX: CSS Animation Parser**
  - [ ] Parse transition classes (transition, duration, delay, ease)
  - [ ] Parse animate classes (spin, ping, pulse, bounce)
  - [ ] Support arbitrary values (duration-[250ms])
  - [ ] Add comprehensive test coverage
  - Estimated effort: 3-5 days

- [ ] **Issue #XX: Animation CSS Converter**
  - [ ] Generate CSS transitions and keyframes
  - [ ] Handle timing functions and delays
  - [ ] Optimize animation performance
  - [ ] Add browser compatibility
  - Estimated effort: 2-3 days

- [ ] **Issue #XX: Figma Animation Integration**
  - [ ] Map CSS animations to Figma transitions
  - [ ] Handle unsupported animation types
  - [ ] Add animation preview in plugin
  - [ ] Document limitations and workarounds
  - Estimated effort: 4-6 days

#### 🎨 Design Token Integration (Medium Priority)
- [ ] **Issue #XX: Token Parser System**
  - [ ] JSON token file import/export
  - [ ] Token validation and error handling
  - [ ] Multi-brand token support
  - [ ] Token inheritance and references
  - Estimated effort: 5-7 days

#### 🧩 Component Library (High Priority)
- [ ] **Issue #XX: Pre-built Components**
  - [ ] Button, Input, Card, Modal components
  - [ ] Theme provider integration
  - [ ] Responsive variants
  - [ ] Accessibility compliance
  - Estimated effort: 7-10 days

### 📊 Completed Tasks
- [x] Enhanced TypeScript Definitions (#44)
- [x] Animation Patterns Documentation (#37)

### 🔄 Next Phase Planning
- [ ] Review Phase 3 roadmap items
- [ ] Estimate effort for Plugin Excellence features
- [ ] Plan AI-powered features implementation
```

### 2️⃣ Individual Feature Issues Creation

**Enhanced Process with Roadmap Integration**:

**Pre-Creation Checklist**:
1. ✅ Feature exists in [ROADMAP.md](mdc:docs/ROADMAP.md)
2. ✅ Tasks detailed in TODOS.md
3. ✅ Priority level confirmed
4. ✅ Dependencies identified
5. ✅ Effort estimated

**Issue Template (Enhanced)**:
```markdown
## 📋 Feature: [Feature Name]

### 🔗 Related Epic & Roadmap
- Part of Release Epic #41
- Roadmap Phase: [Phase 2: Advanced Features & Integrations]
- Priority Level: [High/Medium/Low]
- TODOS.md Reference: [Link to specific section]

### 🎯 Objective
[Clear description of what this feature achieves - from roadmap context]

### 📊 Business Value
- User Impact: [How this helps users]
- Strategic Alignment: [How this fits roadmap goals]
- Success Metrics: [Measurable outcomes]

### 📝 Requirements (from TODOS.md)
- Requirement 1 [✓ Verified in TODOS.md]
- Requirement 2 [✓ Verified in TODOS.md]
- Requirement 3 [✓ Verified in TODOS.md]

### 🔧 Technical Implementation Plan
- Implementation approach [Based on TODOS.md breakdown]
- Key components to modify
- Testing strategy
- **Estimated Effort**: [X days - from TODOS.md]

### 🔗 Dependencies
- [ ] Dependency 1: Issue #XX
- [ ] Dependency 2: Feature Y completion
- [ ] External: Library/API updates

### ✅ Acceptance Criteria
- [ ] Criteria 1 [Linked to TODOS.md checklist]
- [ ] Criteria 2 [Linked to TODOS.md checklist]
- [ ] Criteria 3 [Linked to TODOS.md checklist]

### 🧪 Testing Requirements
- [ ] Unit tests (90%+ coverage)
- [ ] Integration tests
- [ ] Performance benchmarks
- [ ] TypeScript type checking
- [ ] Roadmap success metrics validation

### 📚 Documentation Updates
- [ ] API documentation
- [ ] Code examples
- [ ] README updates
- [ ] ROADMAP.md progress update
- [ ] TODOS.md completion marking

### 🎯 Definition of Done
- [ ] All TODOS.md tasks completed
- [ ] Roadmap success metrics achieved
- [ ] Documentation updated
- [ ] Tests passing
- [ ] Performance benchmarks met
- [ ] Code review approved
```

**GitHub Setup (Enhanced)**:
- Labels: `feature`, `enhancement`, or `bug` + `roadmap-phase-2`, `high-priority`
- Link to Epic issue in description
- Reference ROADMAP.md section
- Assign to developer
- Add to project board with roadmap context

## 🎯 Phase 2: Iterative Development Cycle

### 3️⃣ Feature Branch Creation

**Correct Commands**:
```bash
# 1. Update develop branch
git checkout develop
git pull origin develop

# 2. Create feature branch (CORRECTED - use standard git commands)
git checkout -b feature/issue-44-typescript-definitions

# Alternative method:
git switch -c feature/issue-44-typescript-definitions

# 📝 Branch Naming Convention:
# feature/issue-{number}-{brief-description}
# fix/issue-{number}-{brief-description}
# enhancement/issue-{number}-{brief-description}
# docs/issue-{number}-{brief-description}
```

### 4️⃣ Code Development & Testing

**Development Standards**:
```bash
# 🔧 Implementation Requirements:
# - Follow TypeScript strict mode
# - Maintain 90%+ test coverage
# - Include comprehensive JSDoc documentation
# - Ensure backward compatibility
# - Add performance benchmarks where applicable

# 🧪 Testing Requirements:
# - Unit tests for all new functions
# - Integration tests for API changes
# - End-to-end tests for user flows
# - Performance regression tests
```

**Package Manager Rule**:
```bash
# ⚠️ ALWAYS use pnpm as package manager
# When installing new packages:
pnpm add <packagename>@latest

# Never use npm or yarn
```

### 4️⃣.5️⃣ Enhanced Quality Assurance & Validation 🔍

**Purpose**: Ensure high-quality releases through comprehensive validation

**Pre-Development Validation**:
1. **Technical Feasibility Check**
   - Architecture review for complex features
   - Performance impact assessment
   - Security implications analysis
   - Breaking changes evaluation

2. **Resource Allocation Validation**
   - Developer availability confirmation
   - Timeline feasibility check
   - Dependency resolution planning
   - Risk mitigation strategies

**Development Quality Gates**:
1. **Code Quality Checkpoints**
   - Automated code review (SonarQube/CodeClimate)
   - TypeScript strict mode compliance
   - ESLint/Prettier formatting
   - Security vulnerability scanning

2. **Testing Requirements**
   - Unit test coverage ≥ 90%
   - Integration test coverage ≥ 80%
   - E2E test coverage for critical paths
   - Performance regression testing

3. **Documentation Standards**
   - API documentation completeness
   - Code examples and usage guides
   - Migration guides for breaking changes
   - Accessibility compliance documentation

**Pre-Release Validation**:
1. **Performance Benchmarking**
   - Bundle size impact analysis
   - Runtime performance testing
   - Memory usage profiling
   - Load testing for critical features

2. **Compatibility Testing**
   - Browser compatibility matrix
   - Node.js version compatibility
   - Figma API version compatibility
   - Third-party integration testing

3. **User Experience Validation**
   - Usability testing with real users
   - Accessibility compliance (WCAG 2.1 AA)
   - Mobile responsiveness testing
   - Error handling and edge cases

**Release Readiness Checklist**:
```markdown
## 🚀 Release Readiness Checklist

### 📊 Quality Metrics
- [ ] Test Coverage: Unit ≥90%, Integration ≥80%
- [ ] Performance: No regression >5%
- [ ] Bundle Size: Increase <10% or justified
- [ ] Security: No high/critical vulnerabilities
- [ ] Accessibility: WCAG 2.1 AA compliance

### 🔧 Technical Validation
- [ ] All CI/CD checks passing
- [ ] Cross-browser testing completed
- [ ] Mobile responsiveness verified
- [ ] API compatibility confirmed
- [ ] Breaking changes documented

### 📚 Documentation
- [ ] API docs updated and reviewed
- [ ] Migration guide created (if needed)
- [ ] Examples and tutorials updated
- [ ] CHANGELOG.md entries complete
- [ ] README.md updated

### 🎯 Business Validation
- [ ] Success metrics defined and measurable
- [ ] User feedback incorporated
- [ ] Stakeholder approval obtained
- [ ] Marketing materials prepared
- [ ] Support documentation ready

### 🚨 Risk Assessment
- [ ] Rollback plan prepared
- [ ] Monitoring alerts configured
- [ ] Support team briefed
- [ ] Known issues documented
- [ ] Hotfix process ready
```

### 5️⃣ Changeset Creation (Per Feature)

**Critical Process**:
```bash
# 1. Create changeset for each feature independently
pnpm changeset

# 2. Package Selection (IMPORTANT):
# ✅ cssma (main library) - SELECT THIS
# ❌ cssma-plugin (internal app) - IGNORE
# ❌ figmai-landing (internal app) - IGNORE
# ❌ cssma-react (unless specifically modified)

# 3. Version Type Selection:
# patch: Bug fixes, docs, internal refactoring
# minor: New features, API additions, non-breaking changes
# major: Breaking changes, API removal, structural changes

# 4. Change Description Template:
```

**Changeset Example**:
```markdown
---
"cssma": minor
---

Enhanced TypeScript definitions and IntelliSense support

- Add comprehensive type definitions for all CSSMA class categories
- Implement template literal types for arbitrary value support  
- Add detailed JSDoc documentation with examples for IntelliSense
- Create type-safe class name builder pattern
- Support auto-completion for animation, spacing, layout, and color classes
- Include timing function and duration types with smart autocomplete
- Enhance developer experience with hover documentation
- Maintain backward compatibility with existing code

This enhancement significantly improves the developer experience
by providing full TypeScript IntelliSense support for all CSSMA
utility classes, including arbitrary value syntax.
```

### 6️⃣ Commit & Push

**Commit Standards**:
```bash
# Atomic commits with clear messages
git add .
git commit -m "feat: implement enhanced TypeScript definitions

- Add comprehensive type definitions for all CSSMA classes
- Support template literal types for arbitrary values
- Include JSDoc documentation for IntelliSense
- Create type-safe builder patterns
- Maintain backward compatibility

Closes #44"

# Push to origin
git push origin feature/issue-44-typescript-definitions
```

**Commit Message Convention**:
```bash
# Format: type(scope): description
#
# Extended body (optional)
# - Detail 1
# - Detail 2
#
# Footer: Closes #issue-number

# Types:
# feat: new feature
# fix: bug fix
# docs: documentation changes
# style: formatting (no functionality change)
# refactor: code restructuring
# test: adding/modifying tests
# chore: build, tools, configuration
```

### 7️⃣ Feature PR Creation (feature → develop)

**PR Creation Rules**:
```bash
# Base: develop (NEVER main!)
# Head: feature/issue-44-typescript-definitions
# Title: "feat: Enhanced TypeScript definitions and IntelliSense support (#44)"
```

**PR Template**:
```markdown
## 📋 Summary
[Brief description of the feature and its benefits]

## 🔗 Related Issue
Closes #44
Part of Release Epic #41

## 🚀 Changes Made
- ✅ Feature implementation detail 1
- ✅ Feature implementation detail 2
- ✅ Feature implementation detail 3

## 🧪 Testing
- [ ] Unit tests: [X]% coverage
- [ ] Integration tests: All passing
- [ ] Performance tests: Within thresholds
- [ ] Manual testing: Completed

## 📦 Changeset
- [x] Changeset added (.changeset/[filename].md)
- [x] Version type: [patch/minor/major]
- [x] Breaking changes: [None/Documented]

## 📚 Documentation
- [ ] API docs updated
- [ ] Examples added
- [ ] README updated (if needed)

## 🔄 Impact Assessment
- **Performance**: [Impact description]
- **Bundle Size**: [Size change]
- **Backward Compatibility**: [Compatibility status]

## ✅ Pre-Merge Checklist
- [x] Code follows project conventions
- [x] Tests added/updated and passing
- [x] Documentation updated
- [x] Changeset included
- [x] No console errors/warnings
- [x] TypeScript types valid
```

### 8️⃣ Code Review & PR Merge

**Review Process**:
```bash
# 1. Request code review (minimum 1 reviewer)
# 2. Verify CI/CD checks pass
# 3. Address review feedback
# 4. Get approval
# 5. Merge using Squash Merge (recommended)
```

**Merge Strategy**:
- **Squash Merge**: Preferred for feature PRs (clean history)
- **Merge Commit**: For version PRs (preserve changeset history)

### 9️⃣ Issue Auto-Close & Epic Update

**Automatic Process**:
```bash
# "Closes #44" in commit message automatically closes issue
# Manual Epic update:
# 1. Go to Release Epic issue
# 2. Check off completed feature
# 3. Add progress comment with completion percentage
```

## 🎯 Phase 3: GitHub Actions Automation

### 🔟 GitHub Actions Version PR Auto-Generation ✨

**⚠️ CRITICAL: This is 100% Automated - NO MANUAL INTERVENTION**

**Trigger**: Changeset-containing PR merged to develop
**Action**: GitHub Actions automatically creates:
- New branch: `changeset-release/develop`
- Version PR: `changeset-release/develop → develop`
- Updated package.json files
- Generated CHANGELOG.md entries
- Processed changeset files (removed)

**What NOT to Do**:
```bash
# ❌ NEVER run these commands manually:
pnpm changeset:version
pnpm changeset:publish

# ❌ NEVER create Version PRs manually
# ❌ NEVER modify package.json versions manually
```

### 1️⃣1️⃣ Version PR Review & Verification

**Review Checklist**:
```bash
# GitHub Actions created PR verification:
# ✅ Package versions correctly bumped
# ✅ CHANGELOG.md entries accurate
# ✅ All changeset files processed
# ✅ Dependencies updated correctly
# ✅ No conflicts or errors
```

### 1️⃣2️⃣ Version PR Merge (to develop)

**Merge Process**:
```bash
# 1. Review and approve Version PR
# 2. Merge using Merge Commit (preserve changeset history)
# 3. Verify develop branch updated
# 4. All changesets processed and removed
```

## 🎯 Phase 4: Release Continuation (If More Features Needed)

### 1️⃣3️⃣ Additional Feature Development

**Parallel Development Support**:
```bash
# Multiple developers can work simultaneously:

# Developer A:
git checkout develop
git pull origin develop
git checkout -b feature/issue-42-animation-system

# Developer B:
git checkout develop  
git pull origin develop
git checkout -b feature/issue-43-performance-optimization

# Each follows steps 4-12 independently
# Each creates separate changesets
# GitHub Actions handles Version PR consolidation
```

## 🎯 Phase 5: Production Release

### 1️⃣4️⃣ develop → main PR Creation

**Final Release PR**:
```bash
# When all Epic features completed:
# Base: main
# Head: develop
# Title: "Release v0.2.0 - [Release Theme]"
```

**Release PR Template**:
```markdown
## 🚀 Release v0.2.0 - [Release Theme]

### 📋 Summary
[Comprehensive release summary]

### 🔗 Related Release Epic
Closes #41

### 🎯 New Features
- **Enhanced TypeScript Support**: Full IntelliSense for all classes
- **Animation System**: Advanced keyframe animations
- **Performance Optimization**: 50% faster CSS parsing
- **Developer Experience**: Improved debugging tools

### 🐛 Bug Fixes
- [List any bug fixes included]

### 🔧 Technical Improvements
- [List technical improvements]

### 📦 Version Changes
- cssma: 0.1.9 → 0.2.0
- cssma-react: 0.1.5 → 0.2.0

### 🧪 Quality Assurance
- ✅ Test Coverage: 95%
- ✅ Performance: All benchmarks passed
- ✅ Type Safety: Zero TypeScript errors
- ✅ Integration: All E2E tests passing
- ✅ Backward Compatibility: Maintained

### 📈 Impact
- Performance improvement: 50% faster parsing
- Bundle size: Reduced by 15%
- Developer experience: Significantly enhanced
- Type safety: Complete coverage

### ✅ Production Ready
- [x] All features tested in develop
- [x] Version PRs merged successfully  
- [x] CHANGELOG updated
- [x] Documentation complete
- [x] No breaking changes (or properly documented)
- [x] Performance benchmarks passed
```

### 1️⃣5️⃣ Release Epic Issue Linking

**Link Process**:
```bash
# Add to Release PR description:
# "Closes #41" (Release Epic)
# This automatically closes Epic when PR merges
```

### 1️⃣6️⃣ Production Merge & Auto Deployment

**Final Steps**:
```bash
# 1. Final review of Release PR
# 2. Verify all checklist items completed
# 3. Merge to main branch (Merge Commit)
# 4. GitHub Actions automatically:
#    - Builds packages
#    - Runs tests
#    - Publishes to NPM
#    - Creates GitHub Release
#    - Creates Git tags
```

### 1️⃣7️⃣ Release Epic Completion

**Post-Release Tasks**:
```bash
# 1. Verify NPM deployment: npm view cssma version
# 2. Verify GitHub Release created
# 3. Verify Git tags: git tag -l | tail -5
# 4. Add completion comment to Epic
# 5. Update project documentation
# 6. Plan next release cycle
```

### 1️⃣7️⃣.5️⃣ Post-Release Monitoring & Feedback Loop 📊

**Purpose**: Ensure successful releases and continuous improvement through monitoring and feedback

**Release Monitoring Setup**:
1. **Technical Monitoring**
   - NPM download statistics tracking
   - Error rate monitoring (Sentry/Bugsnag)
   - Performance metrics collection
   - API usage analytics
   - Bundle size impact tracking

2. **User Experience Monitoring**
   - Feature adoption rates
   - User journey analytics
   - Support ticket categorization
   - Community feedback sentiment
   - Documentation usage patterns

**Post-Release Activities**:
1. **Immediate Post-Release (24-48 hours)**
   - Monitor error rates and performance
   - Check NPM deployment success
   - Verify documentation accessibility
   - Monitor community initial feedback
   - Prepare hotfix if critical issues found

2. **Short-term Monitoring (1-2 weeks)**
   - Analyze feature adoption metrics
   - Collect user feedback and issues
   - Monitor performance in production
   - Track support ticket trends
   - Gather community sentiment

3. **Long-term Analysis (1 month)**
   - Comprehensive success metrics review
   - User satisfaction survey results
   - Performance impact assessment
   - ROI analysis for developed features
   - Lessons learned documentation

**Feedback Collection Mechanisms**:
1. **Direct User Feedback**
   - In-app feedback collection
   - GitHub issue templates for feedback
   - Community Discord/Slack channels
   - User interview scheduling
   - Beta testing program feedback

2. **Analytics-Based Insights**
   - Feature usage heatmaps
   - User flow analysis
   - Performance bottleneck identification
   - Error pattern analysis
   - Conversion funnel optimization

**Continuous Improvement Process**:
1. **Monthly Retrospectives**
   - Process effectiveness review
   - Tool and automation improvements
   - Team productivity analysis
   - Quality metrics assessment
   - Stakeholder satisfaction review

2. **Quarterly Roadmap Updates**
   - User feedback integration into roadmap
   - Market trend analysis and adaptation
   - Competitive analysis updates
   - Resource allocation optimization
   - Strategic direction adjustments

**Success Metrics Dashboard**:
```markdown
## 📊 Release Success Metrics Dashboard

### 🎯 Adoption Metrics
- **NPM Downloads**: [Current week] vs [Previous week]
- **Active Users**: [Monthly active users trend]
- **Feature Adoption**: [% users using new features]
- **Community Growth**: [GitHub stars, Discord members]

### 🔧 Technical Metrics
- **Error Rate**: [Current] vs [Target <1%]
- **Performance**: [Load time, bundle size impact]
- **Test Coverage**: [Current %] vs [Target 90%+]
- **Build Success Rate**: [% successful deployments]

### 😊 User Satisfaction
- **Support Tickets**: [Volume and resolution time]
- **User Ratings**: [App store/NPM ratings]
- **Community Sentiment**: [Positive/Negative feedback ratio]
- **Documentation Usage**: [Most accessed docs, search queries]

### 💼 Business Impact
- **Development Velocity**: [Features delivered per sprint]
- **Time to Market**: [Planning to production time]
- **Cost Efficiency**: [Development cost per feature]
- **Market Position**: [Competitive analysis results]
```

**Feedback Integration Workflow**:
```mermaid
graph TD
    A[Release Deployed] --> B[Monitor Metrics]
    B --> C[Collect Feedback]
    C --> D[Analyze Patterns]
    D --> E[Prioritize Improvements]
    E --> F[Update TODOS.md]
    F --> G[Update ROADMAP.md]
    G --> H[Plan Next Release]
    H --> A
    
    C --> I[Critical Issues?]
    I -->|Yes| J[Hotfix Process]
    I -->|No| D
    J --> K[Emergency Release]
    K --> B
```

## 🔧 Configuration & Infrastructure

### 📁 Required Files

**Changeset Configuration** - [.changeset/config.json](mdc:.changeset/config.json):
```json
{
  "$schema": "https://unpkg.com/@changesets/config@2.3.1/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "develop",
  "updateInternalDependencies": "patch",
  "ignore": ["cssma-plugin", "figmai-landing"],
  "snapshot": {
    "useCalculatedVersion": true,
    "prereleaseTemplate": null
  }
}
```

**GitHub Actions** - [.github/workflows/version-pr.yml](mdc:.github/workflows/version-pr.yml):
- Automatically creates Version PRs when changesets exist
- Triggers on push to develop branch

**GitHub Actions** - [.github/workflows/release.yml](mdc:.github/workflows/release.yml):
- Automatically publishes to NPM on main branch merge
- Creates GitHub Releases and Git tags

### 🔐 Required Secrets

**GitHub Repository Secrets**:
- `

### 1️⃣.7️⃣ Automation & Template Setup 🤖

**Purpose**: Streamline issue creation and project management through automation

**GitHub Issue Templates Setup**:
1. **Create `.github/ISSUE_TEMPLATE/` directory**
   - `release-epic.yml`: Release Epic template
   - `feature-request.yml`: Feature Issue template
   - `bug-report.yml`: Bug Report template
   - `performance-improvement.yml`: Performance Issue template

2. **GitHub Project Board Automation**
   - Auto-assign issues to project boards based on labels
   - Auto-move cards based on PR status
   - Link issues to milestones automatically
   - Generate progress reports

3. **Development Tools Integration**
   - VS Code workspace settings for consistent development
   - Pre-commit hooks for code quality
   - Automated dependency updates
   - Security vulnerability scanning

**Release Epic Template (`.github/ISSUE_TEMPLATE/release-epic.yml`)**:
```yaml
name: 🚀 Release Epic
description: Create a new release epic for coordinating multiple features
title: "🚀 Release v[VERSION] - [THEME]"
labels: ["release", "epic"]
assignees: []
body:
  - type: input
    id: version
    attributes:
      label: Release Version
      description: Semantic version for this release
      placeholder: "0.3.0"
    validations:
      required: true
  
  - type: input
    id: theme
    attributes:
      label: Release Theme
      description: Brief theme describing this release
      placeholder: "Advanced Features & Integrations"
    validations:
      required: true
  
  - type: textarea
    id: goals
    attributes:
      label: Release Goals
      description: List the main objectives for this release
      placeholder: |
        - Business objective 1
        - Technical objective 2
        - User experience improvement 3
    validations:
      required: true
  
  - type: textarea
    id: roadmap_reference
    attributes:
      label: Roadmap Reference
      description: Link to specific roadmap phase/section
      placeholder: "Phase 2: Advanced Features & Integrations"
    validations:
      required: true
  
  - type: textarea
    id: success_metrics
    attributes:
      label: Success Metrics
      description: Measurable outcomes for this release
      placeholder: |
        - Performance improvement: X%
        - Test coverage: X%
        - User satisfaction: [Measure]
    validations:
      required: true
```

**Feature Issue Template (`.github/ISSUE_TEMPLATE/feature-request.yml`)**:
```yaml
name: ✨ Feature Request
description: Create a new feature based on roadmap planning
title: "feat: [FEATURE_NAME]"
labels: ["feature", "roadmap"]
assignees: []
body:
  - type: dropdown
    id: epic
    attributes:
      label: Related Release Epic
      description: Which release epic does this belong to?
      options:
        - "v0.3.0 - Advanced Features & Integrations"
        - "v0.4.0 - Plugin Excellence"
        - "v0.5.0 - Enterprise Features"
    validations:
      required: true
  
  - type: dropdown
    id: priority
    attributes:
      label: Priority Level
      description: Priority based on roadmap planning
      options:
        - "High Priority"
        - "Medium Priority"
        - "Low Priority"
    validations:
      required: true
  
  - type: input
    id: todos_reference
    attributes:
      label: TODOS.md Reference
      description: Link to specific section in TODOS.md
      placeholder: "Animation System - CSS Animation Parser"
    validations:
      required: true
  
  - type: textarea
    id: objective
    attributes:
      label: Objective
      description: Clear description from roadmap context
    validations:
      required: true
  
  - type: textarea
    id: business_value
    attributes:
      label: Business Value
      description: User impact and strategic alignment
      placeholder: |
        - User Impact: How this helps users
        - Strategic Alignment: How this fits roadmap goals
        - Success Metrics: Measurable outcomes
    validations:
      required: true
  
  - type: textarea
    id: requirements
    attributes:
      label: Requirements (from TODOS.md)
      description: List requirements verified in TODOS.md
      placeholder: |
        - [ ] Requirement 1 [✓ Verified in TODOS.md]
        - [ ] Requirement 2 [✓ Verified in TODOS.md]
    validations:
      required: true
  
  - type: input
    id: estimated_effort
    attributes:
      label: Estimated Effort
      description: Development time estimate from TODOS.md
      placeholder: "3-5 days"
    validations:
      required: true
```

### 1️⃣.8️⃣ Communication & Collaboration Framework 💬

**Purpose**: Ensure effective communication throughout the development lifecycle

**Stakeholder Communication Plan**:
1. **Release Planning Communication**
   - Roadmap review meetings with stakeholders
   - Feature prioritization discussions
   - Timeline and resource planning sessions
   - Risk assessment and mitigation planning

2. **Development Progress Updates**
   - Weekly progress reports to stakeholders
   - Milestone completion notifications
   - Blocker escalation procedures
   - Success metrics tracking and reporting

3. **Release Communication**
   - Pre-release announcements to community
   - Release notes and migration guides
   - Post-release feedback collection
   - Success metrics reporting

**Team Coordination Processes**:
1. **Daily Development Coordination**
   - Stand-up meetings for active features
   - Dependency coordination between developers
   - Code review assignment and tracking
   - Knowledge sharing sessions

2. **Sprint Planning & Review**
   - Sprint planning based on TODOS.md priorities
   - Sprint review with demo and metrics
   - Retrospective for process improvements
   - Capacity planning for next sprint

**Community Engagement**:
1. **Open Source Community**
   - Regular community updates on progress
   - Feature request collection and prioritization
   - Contributor onboarding and mentorship
   - Community feedback integration

2. **User Feedback Loop**
   - Beta testing program for major features
   - User interview sessions for UX validation
   - Support ticket analysis for improvement areas
   - Feature usage analytics review

**Communication Templates**:

**Weekly Progress Report Template**:
```markdown
# 📊 Weekly Progress Report - Week of [DATE]

## 🎯 Current Release: v[VERSION] - [THEME]

### ✅ Completed This Week
- [x] Feature/Task 1 - [Developer] - [Impact]
- [x] Feature/Task 2 - [Developer] - [Impact]

### 🔄 In Progress
- [ ] Feature/Task 3 - [Developer] - [Expected completion]
- [ ] Feature/Task 4 - [Developer] - [Expected completion]

### 🚨 Blockers & Risks
- **Blocker 1**: [Description] - [Mitigation plan]
- **Risk 1**: [Description] - [Probability/Impact]

### 📈 Metrics Update
- **Development Velocity**: [X features/week]
- **Test Coverage**: [X%]
- **Performance**: [Status]
- **Timeline**: [On track/At risk/Behind]

### 🎯 Next Week Priorities
1. [Priority 1] - [Owner] - [Success criteria]
2. [Priority 2] - [Owner] - [Success criteria]

### 💡 Insights & Learnings
- [Key insight 1]
- [Process improvement identified]
```

**Release Announcement Template**:
```markdown
# 🚀 FigmaikR v[VERSION] - [THEME] Released!

## 🎉 What's New

### ✨ Major Features
- **[Feature 1]**: [Brief description and benefit]
- **[Feature 2]**: [Brief description and benefit]

### 🔧 Improvements
- [Improvement 1]: [Impact]
- [Improvement 2]: [Impact]

### 🐛 Bug Fixes
- [Fix 1]: [Issue resolved]
- [Fix 2]: [Issue resolved]

## 📊 Release Metrics
- **Development Time**: [X weeks]
- **Features Delivered**: [X features]
- **Test Coverage**: [X%]
- **Performance Improvement**: [X%]

## 🚀 Getting Started
```bash
# Update to latest version
pnpm add cssma@latest
```

## 📚 Documentation
- [Migration Guide](mdc:link)
- [API Documentation](mdc:link)
- [Examples & Tutorials](mdc:link)

## 🙏 Acknowledgments
Special thanks to [contributors] for their contributions to this release.

## 🔮 What's Next
Preview of upcoming features in v[NEXT_VERSION]:
- [Upcoming feature 1]
- [Upcoming feature 2]
```