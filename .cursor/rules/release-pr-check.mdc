---
description:
globs:
alwaysApply: false
---
# Release PR Check Rule

## 🚀 Release PR Creation and Verification Guide

### 📋 Rule Overview
Before creating any PR, you must always check if a `develop → main` release PR exists, and if not, automatically create one.

### ⚡ Required Verification Process

#### 1️⃣ Check for Release PR Before Creating Any PR
For all PR creation requests, follow this sequence:

```bash
# 1. Check current open PR list
mcp_GitHub_list_pull_requests(
  owner: "easylogic",
  repo: "cssma", 
  state: "open",
  base: "main"
)

# 2. Check if develop → main PR exists
# - Check if PR with head: "develop" exists
# - If not, proceed to next step
```

#### 2️⃣ Auto-create Release PR
If no `develop → main` PR exists, create immediately:

```bash
# Create develop → main release PR
mcp_GitHub_create_pull_request(
  owner: "easylogic",
  repo: "cssma",
  title: "Release: [Current Features]",
  head: "develop", 
  base: "main",
  body: "[Release content template]"
)
```

### 📝 Release PR Template

```markdown
## 🚀 Release Summary
[Release summary description]

## 🎯 New Features
[New features list]

## 🐛 Bug Fixes  
[Bug fixes list]

## 🔧 API Improvements
[API improvements list]

## 📦 Technical Implementation
[Technical implementation details]

## 🧪 Quality Assurance
- ✅ Test Coverage: [Test coverage details]
- ✅ Performance: [Performance requirements]
- ✅ Type Safety: [Type safety implementation]
- ✅ Integration: [Integration testing]
- ✅ Backward Compatibility: [Compatibility status]

## 📈 Impact
[Impact and improvements]

## 🔄 Version Impact
- **Type**: [patch/minor/major]
- **Packages Updated**: [Updated packages]
- **Migration**: [Migration requirements]

## ✅ Ready for Production
[Production readiness checklist]
```

### 🔄 Automation Commands

#### Pre-PR Creation Check Workflow
```bash
# 1. Check current status
git status
git branch

# 2. Switch to develop branch and update
git checkout develop
git pull origin develop

# 3. Check GitHub PR status (using MCP)
mcp_GitHub_list_pull_requests(state: "open", base: "main")

# 4. Create release PR if none exists
mcp_GitHub_create_pull_request(head: "develop", base: "main")

# 5. Return to original working branch
git checkout [original-branch]
```

### 🚨 Critical Rules

#### Absolute Rules
- **No Code Modifications**: This task only performs GitHub operations, no code changes
- **Use MCP Tools Only**: Only use `mcp_GitHub_*` functions
- **Auto-generation**: Always create release PR if none exists
- **Order Compliance**: Release PR check/creation → Feature PR creation

#### Exception Cases
- **Hot Fix**: `hotfix/*` branches can PR directly to main
- **Docs Only**: Documentation-only changes may be exempted

### 🛠️ Implementation Checklist

When user requests PR creation:

- [ ] Use `mcp_GitHub_list_pull_requests` to check current open PRs
- [ ] Check if `head: "develop", base: "main"` PR exists
- [ ] If not, use `mcp_GitHub_create_pull_request` to create release PR
- [ ] After release PR creation, proceed with original feature PR creation
- [ ] Clearly explain all processes to the user

### 📋 Usage Example

**User Request**: "Create a new feature PR"

**AI Response Sequence**:
1. "First, I'll check the release PR status."
2. Execute `mcp_GitHub_list_pull_requests`
3. If no release PR: "I'll create a release PR first."
4. Execute `mcp_GitHub_create_pull_request`
5. "Now I'll create the requested feature PR."
6. Proceed with feature PR creation

### 🎯 Objectives
- **Consistent Release Process**: All changes are systematically released
- **Automated Workflow**: Automatic processing without manual verification
- **Clear Release Tracking**: All features included in appropriate release PRs
- **Efficient Deployment**: Always maintain release-ready state
