---
description: 개발 워크플로우 및 자동화 가이드, GitHub Actions 워크플로우
globs: 
alwaysApply: false
---
# Development Workflow and Automation Guide

## 🔄 Complete Development Flow Overview

### Current Proven Workflow (Updated 2024)

```mermaid
graph TD
    A[Feature 개발] --> B[develop 브랜치에 PR]
    B --> C[PR 머지 to develop]
    C --> D[Changeset 누적]
    D --> E{릴리즈 준비?}
    E -->|Yes| F[Version PR 자동 생성]
    E -->|No| A
    F --> G[Version PR 머지 to develop]
    G --> H[develop → main PR 생성]
    H --> I[main 브랜치 머지]
    I --> J[자동 NPM 배포]
    J --> K[GitHub Release 생성]
```

## 🛠️ Step-by-Step Development Process

### 1️⃣ Feature Development with Changeset

**Complete workflow for each feature/fix:**

```bash
# 1. Create feature branch from develop
git checkout develop
git pull origin develop
git checkout -b feature/your-feature-name

# 2. Develop your feature
# ... make code changes ...

# 3. Create changeset for your changes
pnpm changeset
# Select packages: cssma
# Select change type: patch/minor/major
# Write clear description of changes

# 4. Commit changes including changeset
git add .
git commit -m "feat: add your feature

- Implement feature X
- Add changeset for version bump"

# 5. Push branch and create PR to develop
git push origin feature/your-feature-name
# Create PR targeting develop branch (NOT main)
```

### 2️⃣ Changeset Accumulation in Develop

**Multiple features before release:**

```bash
# develop branch accumulates changesets:

# PR #1: feature/live-preview → develop
.changeset/brave-lions-dance.md (minor)

# PR #2: fix/css-parser-bug → develop  
.changeset/tiny-cats-jump.md (patch)

# PR #3: feature/new-converter → develop
.changeset/loud-dogs-sing.md (minor)

# develop branch now contains:
.changeset/
├── brave-lions-dance.md (minor)
├── tiny-cats-jump.md (patch)
├── loud-dogs-sing.md (minor)
└── config.json
```

### 3️⃣ Version PR Automation (NEW!)

**Automatic version PR creation:**

```bash
# When changesets exist in develop:
# 1. GitHub Actions automatically creates Version PR
# 2. PR title: "chore: version packages"
# 3. Processes all accumulated changesets
# 4. Updates package.json versions
# 5. Updates CHANGELOG.md
# 6. Removes processed changeset files

# Manual trigger option (NEW!):
# Go to: https://github.com/easylogic/cssma/actions/workflows/version-pr.yml
# Click "Run workflow" → Select branch → Run
```

### 4️⃣ Release to Production

**Final release process:**

```bash
# 1. Merge Version PR to develop
# 2. Create develop → main PR manually
# 3. Review all changes going to production
# 4. Merge to main
# 5. GitHub Actions triggers:
#    - NPM deployment
#    - GitHub Release creation
#    - Git tag creation
```

## 🔧 GitHub Actions Workflows

### 1. Version PR Workflow ([.github/workflows/version-pr.yml](mdc:.github/workflows/version-pr.yml))

**Enhanced with manual trigger support:**

```yaml
name: Version PR

on:
  push:
    branches:
      - develop
  workflow_dispatch:    # NEW: Manual trigger support
    inputs:
      branch:
        description: 'Branch to run on'
        required: false
        default: 'develop'

# Key features:
# - Automatic changeset processing
# - Version bump calculation
# - CHANGELOG generation
# - Manual execution capability
```

#### Manual Workflow Execution

```bash
# Option 1: GitHub UI
# 1. Go to Actions tab
# 2. Select "Version PR" workflow
# 3. Click "Run workflow"
# 4. Select branch (default: develop)
# 5. Click "Run workflow"

# Option 2: Automatic trigger
# Push to develop branch with changesets
```

### 2. Release Workflow ([.github/workflows/release.yml](mdc:.github/workflows/release.yml))

**Production deployment automation:**

```yaml
# Trigger: main branch push
on:
  push:
    branches: [main]

# Process:
# 1. Build packages
# 2. NPM deployment
# 3. GitHub Release creation
# 4. Git tag creation
```

## 📋 Changeset Management Best Practices

### 1. Changeset Creation Guidelines

```bash
# Interactive changeset creation
pnpm changeset

# Selection criteria:
# patch: Bug fixes, docs, small improvements
# minor: New features, API additions
# major: Breaking changes, API removals
```

#### Example Changeset Content

```markdown
---
"cssma": minor
---

Add real-time CSS preview system

- Implement LivePreview component with debounced updates
- Add error handling and loading states
- Include style inspector functionality
- Support enable/disable toggle control
```

### 2. Changeset Accumulation Strategy

**Benefits of develop branch accumulation:**

- ✅ **Multiple features per release**: Combine related features
- ✅ **Flexible release timing**: Release when ready, not per feature
- ✅ **Better version control**: Logical version increments
- ✅ **Reduced deployment frequency**: Fewer NPM publishes

### 3. Version Calculation Logic

```bash
# Changeset combination rules:
# patch + patch = patch (0.1.0 → 0.1.1)
# patch + minor = minor (0.1.0 → 0.2.0)
# minor + minor = minor (0.1.0 → 0.2.0)
# any + major = major (0.1.0 → 1.0.0)

# Example scenario:
# - 2 minor features + 1 patch fix = minor release
# - 0.1.2 → 0.2.0
```

## 🚀 Branch Management Strategy

### 1. Branch Hierarchy

```
main                 # Production releases only
├── develop          # Integration & changeset accumulation
│   ├── feature/xxx  # New feature development
│   ├── fix/xxx      # Bug fixes
│   └── hotfix/xxx   # Critical fixes
└── changeset-release/develop  # Auto-generated version PRs
```

### 2. Branch Protection Rules

**Recommended GitHub settings:**

```yaml
# main branch protection:
protection_rules:
  require_pull_request_reviews: true
  required_approving_review_count: 1
  dismiss_stale_reviews: true
  require_status_checks: true
  required_status_checks:
    - "build"
    - "test"
    - "type-check"
  enforce_admins: false
  allow_force_pushes: false
  allow_deletions: false

# develop branch protection:
protection_rules:
  require_pull_request_reviews: true
  required_approving_review_count: 1
  require_status_checks: true
```

### 3. Merge Strategies

```bash
# Feature → develop: Squash merge (clean history)
# Version PR → develop: Merge commit (preserve changeset processing)
# develop → main: Merge commit (preserve release history)
```

## 🔍 Workflow Monitoring & Debugging

### 1. GitHub Actions Debugging

**Manual workflow execution for testing:**

```bash
# Test version PR workflow:
# 1. Ensure changesets exist in develop
# 2. Go to Actions → Version PR → Run workflow
# 3. Monitor execution logs
# 4. Check created PR

# Common debugging steps:
# - Check changeset files exist
# - Verify pnpm installation
# - Review GitHub permissions
# - Monitor build logs
```

### 2. Troubleshooting Common Issues

#### Version PR Creation Failure

```bash
# Cause: No changesets in develop
# Solution: Ensure changeset files exist

# Cause: GitHub Actions permissions
# Solution: Enable "Allow GitHub Actions to create PRs"

# Cause: Merge conflicts
# Solution: Resolve conflicts manually
```

#### NPM Deployment Failure

```bash
# Cause: NPM_TOKEN expired
# Solution: Update token in GitHub Secrets

# Cause: Package version already exists
# Solution: Check version calculation logic
```

### 3. Status Monitoring Commands

```bash
# Check changeset status
pnpm changeset:status

# Preview version changes
pnpm changeset:version --dry-run

# Check current package version
npm view cssma version

# Monitor GitHub Actions
# Visit: https://github.com/easylogic/cssma/actions
```

## 📦 Package Management Configuration

### 1. Monorepo Structure

```
packages/
  cssma/           # Core library (deployed to NPM)
apps/
  cssma-plugin/    # Figma plugin (private)
  figmai-landing/  # Landing page (private)
```

### 2. Changeset Configuration ([.changeset/config.json](mdc:.changeset/config.json))

```json
{
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "access": "public",
  "baseBranch": "develop",  # Changed from main to develop
  "updateInternalDependencies": "patch",
  "ignore": ["figmai-landing", "cssma-plugin"],
  "snapshot": {
    "useCalculatedVersion": true
  }
}
```

### 3. Package Scripts

```json
{
  "scripts": {
    "changeset": "changeset",
    "changeset:version": "changeset version",
    "changeset:publish": "changeset publish",
    "changeset:status": "changeset status",
    "release": "pnpm build && pnpm changeset:publish",
    "build": "pnpm --filter cssma build",
    "build:all": "pnpm -r build"
  }
}
```

## 🎯 Real-World Usage Examples

### Example 1: Single Feature Release

```bash
# 1. Develop feature
git checkout -b feature/css-grid-support
# ... implement feature ...
pnpm changeset  # minor
git commit -m "feat: add CSS Grid support"
git push origin feature/css-grid-support

# 2. Create PR to develop → merge

# 3. Trigger version PR (automatic or manual)
# 4. Merge version PR to develop
# 5. Create develop → main PR → merge
# 6. Automatic NPM deployment
```

### Example 2: Multiple Features Release

```bash
# Week 1: Feature A
feature/live-preview → develop (minor changeset)

# Week 2: Feature B  
feature/new-parser → develop (minor changeset)

# Week 3: Bug fix
fix/edge-case → develop (patch changeset)

# Week 4: Ready for release
# 1. Version PR processes all 3 changesets
# 2. Calculates: 2 minor + 1 patch = minor release
# 3. Version: 0.1.0 → 0.2.0
# 4. develop → main → NPM deployment
```

### Example 3: Hotfix Process

```bash
# Critical bug in production
git checkout main
git pull origin main
git checkout -b hotfix/critical-parser-bug

# ... fix bug ...
pnpm changeset  # patch
git commit -m "fix: resolve critical parser bug"
git push origin hotfix/critical-parser-bug

# Option 1: Emergency (direct to main)
# Create PR to main → merge → immediate deployment

# Option 2: Standard (through develop)
# Create PR to develop → follow normal process
```

## 🔐 Security & Permissions

### 1. GitHub Actions Permissions

**Required repository settings:**

```bash
# Settings → Actions → General
# ✅ Allow GitHub Actions to create and approve pull requests
# ✅ Allow GitHub Actions to create and approve pull requests

# Workflow permissions:
# ✅ Read and write permissions
# ✅ Allow GitHub Actions to create and approve pull requests
```

### 2. NPM Token Management

```bash
# NPM token requirements:
# - Type: Automation
# - Scope: Public packages
# - Expiration: No expiration (or long-term)

# GitHub Secrets:
# NPM_TOKEN: npm_xxxxxxxxxxxx
# GITHUB_TOKEN: (auto-provided)
```

## 📈 Performance Optimization

### 1. Build Performance

```bash
# Optimized build commands:
pnpm --filter cssma build     # Build only deployed package
pnpm -r --parallel build      # Parallel builds for development

# Cache optimization:
# - GitHub Actions cache for node_modules
# - pnpm store cache for dependencies
```

### 2. Workflow Efficiency

```bash
# Debounced workflow execution:
# - Version PR only runs when changesets exist
# - Manual trigger prevents unnecessary runs
# - Conditional steps based on changeset presence
```

This comprehensive workflow ensures reliable, automated package management with flexibility for both automatic and manual execution. Follow this guide for consistent development and deployment processes.
