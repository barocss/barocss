---
description: 
globs: 
alwaysApply: false
---
# FigmaikR Professional Multi-Issue Release Workflow

## 🚀 Complete Enterprise-Grade Development Process

### 📋 Workflow Overview

This guide defines the complete professional development workflow for FigmaikR project, supporting multi-issue releases with full automation and traceability.

```mermaid
graph TD
    A[Release Epic Creation] --> B[Feature Issues Creation]
    B --> C[Feature Branch Creation]
    C --> D[Code Development & Testing]
    D --> E[Changeset Creation]
    E --> F[Commit & Push]
    F --> G[Feature PR Creation]
    G --> H[Code Review & Merge]
    H --> I[Issue Auto-Close]
    I --> J[GitHub Actions: Auto Version PR]
    J --> K[Version PR Review & Merge]
    K --> L[Additional Features?]
    L -->|Yes| C
    L -->|No| M[develop → main PR]
    M --> N[Release Epic Link]
    N --> O[Production Merge]
    O --> P[Auto NPM Deployment]
    P --> Q[Release Epic Completion]
```

## 🎯 Phase 1: Release Planning & Setup

### 1️⃣ Release Epic Issue Creation

**Purpose**: Central coordination and tracking for multi-feature releases

**Template Structure**:
```markdown
## 🚀 Release v0.2.0 - [Release Theme]

### 🎯 Release Goals
- Business objective 1
- Technical objective 2
- User experience improvement 3

### 📅 Timeline
- **Planning**: [Date range]
- **Development**: [Date range]
- **QA & Testing**: [Date range]
- **Release**: [Target date]

### ✅ Success Metrics
- Performance improvement: [X%]
- Test coverage: [X%]
- User satisfaction: [Measure]

### 🔧 Features Checklist
- [ ] #42 Advanced Animation System
- [ ] #43 Parser Performance Optimization
- [ ] #44 Enhanced TypeScript Definitions
- [ ] #45 Developer Experience Improvements

### 📊 Progress Tracking
[Update regularly with completion percentages]
```

**GitHub Setup**:
- Labels: `release`, `epic`, `milestone`
- Assignee: Release manager
- Milestone: Create v0.2.0 milestone

### 2️⃣ Individual Feature Issues Creation

**For each feature in the Epic**:

**Issue Template**:
```markdown
## 📋 Feature: [Feature Name]

### 🔗 Related Epic
Part of Release Epic #41

### 🎯 Objective
[Clear description of what this feature achieves]

### 📝 Requirements
- Requirement 1
- Requirement 2
- Requirement 3

### 🔧 Technical Implementation Plan
- Implementation approach
- Key components to modify
- Testing strategy

### ✅ Acceptance Criteria
- [ ] Criteria 1
- [ ] Criteria 2
- [ ] Criteria 3

### 🧪 Testing Requirements
- [ ] Unit tests (90%+ coverage)
- [ ] Integration tests
- [ ] Performance benchmarks
- [ ] TypeScript type checking

### 📚 Documentation Updates
- [ ] API documentation
- [ ] Code examples
- [ ] README updates
```

**GitHub Setup**:
- Labels: `feature`, `enhancement`, or `bug`
- Link to Epic issue in description
- Assign to developer

## 🎯 Phase 2: Iterative Development Cycle

### 3️⃣ Feature Branch Creation

**Correct Commands**:
```bash
# 1. Update develop branch
git checkout develop
git pull origin develop

# 2. Create feature branch (CORRECTED - use standard git commands)
git checkout -b feature/issue-44-typescript-definitions

# Alternative method:
git switch -c feature/issue-44-typescript-definitions

# 📝 Branch Naming Convention:
# feature/issue-{number}-{brief-description}
# fix/issue-{number}-{brief-description}
# enhancement/issue-{number}-{brief-description}
# docs/issue-{number}-{brief-description}
```

### 4️⃣ Code Development & Testing

**Development Standards**:
```bash
# 🔧 Implementation Requirements:
# - Follow TypeScript strict mode
# - Maintain 90%+ test coverage
# - Include comprehensive JSDoc documentation
# - Ensure backward compatibility
# - Add performance benchmarks where applicable

# 🧪 Testing Requirements:
# - Unit tests for all new functions
# - Integration tests for API changes
# - End-to-end tests for user flows
# - Performance regression tests
```

**Package Manager Rule**:
```bash
# ⚠️ ALWAYS use pnpm as package manager
# When installing new packages:
pnpm add <packagename>@latest

# Never use npm or yarn
```

### 5️⃣ Changeset Creation (Per Feature)

**Critical Process**:
```bash
# 1. Create changeset for each feature independently
pnpm changeset

# 2. Package Selection (IMPORTANT):
# ✅ cssma (main library) - SELECT THIS
# ❌ cssma-plugin (internal app) - IGNORE
# ❌ figmai-landing (internal app) - IGNORE
# ❌ cssma-react (unless specifically modified)

# 3. Version Type Selection:
# patch: Bug fixes, docs, internal refactoring
# minor: New features, API additions, non-breaking changes
# major: Breaking changes, API removal, structural changes

# 4. Change Description Template:
```

**Changeset Example**:
```markdown
---
"cssma": minor
---

Enhanced TypeScript definitions and IntelliSense support

- Add comprehensive type definitions for all CSSMA class categories
- Implement template literal types for arbitrary value support  
- Add detailed JSDoc documentation with examples for IntelliSense
- Create type-safe class name builder pattern
- Support auto-completion for animation, spacing, layout, and color classes
- Include timing function and duration types with smart autocomplete
- Enhance developer experience with hover documentation
- Maintain backward compatibility with existing code

This enhancement significantly improves the developer experience
by providing full TypeScript IntelliSense support for all CSSMA
utility classes, including arbitrary value syntax.
```

### 6️⃣ Commit & Push

**Commit Standards**:
```bash
# Atomic commits with clear messages
git add .
git commit -m "feat: implement enhanced TypeScript definitions

- Add comprehensive type definitions for all CSSMA classes
- Support template literal types for arbitrary values
- Include JSDoc documentation for IntelliSense
- Create type-safe builder patterns
- Maintain backward compatibility

Closes #44"

# Push to origin
git push origin feature/issue-44-typescript-definitions
```

**Commit Message Convention**:
```bash
# Format: type(scope): description
#
# Extended body (optional)
# - Detail 1
# - Detail 2
#
# Footer: Closes #issue-number

# Types:
# feat: new feature
# fix: bug fix
# docs: documentation changes
# style: formatting (no functionality change)
# refactor: code restructuring
# test: adding/modifying tests
# chore: build, tools, configuration
```

### 7️⃣ Feature PR Creation (feature → develop)

**PR Creation Rules**:
```bash
# Base: develop (NEVER main!)
# Head: feature/issue-44-typescript-definitions
# Title: "feat: Enhanced TypeScript definitions and IntelliSense support (#44)"
```

**PR Template**:
```markdown
## 📋 Summary
[Brief description of the feature and its benefits]

## 🔗 Related Issue
Closes #44
Part of Release Epic #41

## 🚀 Changes Made
- ✅ Feature implementation detail 1
- ✅ Feature implementation detail 2
- ✅ Feature implementation detail 3

## 🧪 Testing
- [ ] Unit tests: [X]% coverage
- [ ] Integration tests: All passing
- [ ] Performance tests: Within thresholds
- [ ] Manual testing: Completed

## 📦 Changeset
- [x] Changeset added (.changeset/[filename].md)
- [x] Version type: [patch/minor/major]
- [x] Breaking changes: [None/Documented]

## 📚 Documentation
- [ ] API docs updated
- [ ] Examples added
- [ ] README updated (if needed)

## 🔄 Impact Assessment
- **Performance**: [Impact description]
- **Bundle Size**: [Size change]
- **Backward Compatibility**: [Compatibility status]

## ✅ Pre-Merge Checklist
- [x] Code follows project conventions
- [x] Tests added/updated and passing
- [x] Documentation updated
- [x] Changeset included
- [x] No console errors/warnings
- [x] TypeScript types valid
```

### 8️⃣ Code Review & PR Merge

**Review Process**:
```bash
# 1. Request code review (minimum 1 reviewer)
# 2. Verify CI/CD checks pass
# 3. Address review feedback
# 4. Get approval
# 5. Merge using Squash Merge (recommended)
```

**Merge Strategy**:
- **Squash Merge**: Preferred for feature PRs (clean history)
- **Merge Commit**: For version PRs (preserve changeset history)

### 9️⃣ Issue Auto-Close & Epic Update

**Automatic Process**:
```bash
# "Closes #44" in commit message automatically closes issue
# Manual Epic update:
# 1. Go to Release Epic issue
# 2. Check off completed feature
# 3. Add progress comment with completion percentage
```

## 🎯 Phase 3: GitHub Actions Automation

### 🔟 GitHub Actions Version PR Auto-Generation ✨

**⚠️ CRITICAL: This is 100% Automated - NO MANUAL INTERVENTION**

**Trigger**: Changeset-containing PR merged to develop
**Action**: GitHub Actions automatically creates:
- New branch: `changeset-release/develop`
- Version PR: `changeset-release/develop → develop`
- Updated package.json files
- Generated CHANGELOG.md entries
- Processed changeset files (removed)

**What NOT to Do**:
```bash
# ❌ NEVER run these commands manually:
pnpm changeset:version
pnpm changeset:publish

# ❌ NEVER create Version PRs manually
# ❌ NEVER modify package.json versions manually
```

### 1️⃣1️⃣ Version PR Review & Verification

**Review Checklist**:
```bash
# GitHub Actions created PR verification:
# ✅ Package versions correctly bumped
# ✅ CHANGELOG.md entries accurate
# ✅ All changeset files processed
# ✅ Dependencies updated correctly
# ✅ No conflicts or errors
```

### 1️⃣2️⃣ Version PR Merge (to develop)

**Merge Process**:
```bash
# 1. Review and approve Version PR
# 2. Merge using Merge Commit (preserve changeset history)
# 3. Verify develop branch updated
# 4. All changesets processed and removed
```

## 🎯 Phase 4: Release Continuation (If More Features Needed)

### 1️⃣3️⃣ Additional Feature Development

**Parallel Development Support**:
```bash
# Multiple developers can work simultaneously:

# Developer A:
git checkout develop
git pull origin develop
git checkout -b feature/issue-42-animation-system

# Developer B:
git checkout develop  
git pull origin develop
git checkout -b feature/issue-43-performance-optimization

# Each follows steps 4-12 independently
# Each creates separate changesets
# GitHub Actions handles Version PR consolidation
```

## 🎯 Phase 5: Production Release

### 1️⃣4️⃣ develop → main PR Creation

**Final Release PR**:
```bash
# When all Epic features completed:
# Base: main
# Head: develop
# Title: "Release v0.2.0 - [Release Theme]"
```

**Release PR Template**:
```markdown
## 🚀 Release v0.2.0 - [Release Theme]

### 📋 Summary
[Comprehensive release summary]

### 🔗 Related Release Epic
Closes #41

### 🎯 New Features
- **Enhanced TypeScript Support**: Full IntelliSense for all classes
- **Animation System**: Advanced keyframe animations
- **Performance Optimization**: 50% faster CSS parsing
- **Developer Experience**: Improved debugging tools

### 🐛 Bug Fixes
- [List any bug fixes included]

### 🔧 Technical Improvements
- [List technical improvements]

### 📦 Version Changes
- cssma: 0.1.9 → 0.2.0
- cssma-react: 0.1.5 → 0.2.0

### 🧪 Quality Assurance
- ✅ Test Coverage: 95%
- ✅ Performance: All benchmarks passed
- ✅ Type Safety: Zero TypeScript errors
- ✅ Integration: All E2E tests passing
- ✅ Backward Compatibility: Maintained

### 📈 Impact
- Performance improvement: 50% faster parsing
- Bundle size: Reduced by 15%
- Developer experience: Significantly enhanced
- Type safety: Complete coverage

### ✅ Production Ready
- [x] All features tested in develop
- [x] Version PRs merged successfully  
- [x] CHANGELOG updated
- [x] Documentation complete
- [x] No breaking changes (or properly documented)
- [x] Performance benchmarks passed
```

### 1️⃣5️⃣ Release Epic Issue Linking

**Link Process**:
```bash
# Add to Release PR description:
# "Closes #41" (Release Epic)
# This automatically closes Epic when PR merges
```

### 1️⃣6️⃣ Production Merge & Auto Deployment

**Final Steps**:
```bash
# 1. Final review of Release PR
# 2. Verify all checklist items completed
# 3. Merge to main branch (Merge Commit)
# 4. GitHub Actions automatically:
#    - Builds packages
#    - Runs tests
#    - Publishes to NPM
#    - Creates GitHub Release
#    - Creates Git tags
```

### 1️⃣7️⃣ Release Epic Completion

**Post-Release Tasks**:
```bash
# 1. Verify NPM deployment: npm view cssma version
# 2. Verify GitHub Release created
# 3. Verify Git tags: git tag -l | tail -5
# 4. Add completion comment to Epic
# 5. Update project documentation
# 6. Plan next release cycle
```

## 🔧 Configuration & Infrastructure

### 📁 Required Files

**Changeset Configuration** - [.changeset/config.json](mdc:.changeset/config.json):
```json
{
  "$schema": "https://unpkg.com/@changesets/config@2.3.1/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "develop",
  "updateInternalDependencies": "patch",
  "ignore": ["cssma-plugin", "figmai-landing"],
  "snapshot": {
    "useCalculatedVersion": true,
    "prereleaseTemplate": null
  }
}
```

**GitHub Actions** - [.github/workflows/version-pr.yml](mdc:.github/workflows/version-pr.yml):
- Automatically creates Version PRs when changesets exist
- Triggers on push to develop branch

**GitHub Actions** - [.github/workflows/release.yml](mdc:.github/workflows/release.yml):
- Automatically publishes to NPM on main branch merge
- Creates GitHub Releases and Git tags

### 🔐 Required Secrets

**GitHub Repository Secrets**:
- `NPM_TOKEN`: For NPM publishing
- `GITHUB_TOKEN`: For GitHub API access (auto-provided)

### 🛡️ Branch Protection Rules

**main branch**:
- Require pull request reviews (1+ reviewers)
- Require status checks to pass
- Restrict pushes that create large files
- No force pushes allowed

**develop branch**:
- Require pull request reviews (1+ reviewers)
- Require status checks to pass
- Allow force pushes (when necessary)

## ⚠️ Critical Rules & Restrictions

### 🚫 NEVER Do These

1. **Manual Changeset Processing**:
   ```bash
   # ❌ FORBIDDEN
   pnpm changeset:version
   ```

2. **Manual Version PR Creation**:
   ```bash
   # ❌ FORBIDDEN - Only GitHub Actions creates these
   ```

3. **Manual Package Version Changes**:
   ```bash
   # ❌ FORBIDDEN - Only changesets manage versions
   ```

4. **Direct Main Branch Push**:
   ```bash
   # ❌ FORBIDDEN - Only via PR
   git push origin main
   ```

5. **Wrong PR Base Branch**:
   ```bash
   # ❌ FORBIDDEN - Feature PRs must target develop
   # Base: main ← WRONG
   # Base: develop ← CORRECT
   ```

### ✅ ALWAYS Do These

1. **Use pnpm Package Manager**:
   ```bash
   # ✅ CORRECT
   pnpm add package@latest
   ```

2. **Standard Git Branch Commands**:
   ```bash
   # ✅ CORRECT (not 'git new')
   git checkout -b feature/issue-X-description
   git switch -c feature/issue-X-description
   ```

3. **Atomic Commits with Issue Links**:
   ```bash
   # ✅ CORRECT
   git commit -m "feat: description

   Closes #123"
   ```

4. **Feature PRs to develop**:
   ```bash
   # ✅ CORRECT
   Base: develop
   Head: feature/issue-X-description
   ```

## 🎯 Quality Assurance Checkpoints

### 🧪 Feature Level QA
- [ ] Unit test coverage ≥ 90%
- [ ] Integration tests pass
- [ ] TypeScript compilation clean
- [ ] ESLint/Prettier compliance
- [ ] Performance benchmarks met

### 📦 Version PR Level QA
- [ ] Package versions accurate
- [ ] CHANGELOG content complete
- [ ] Breaking changes documented
- [ ] Dependencies up to date

### 🚀 Release Level QA
- [ ] All Epic features complete
- [ ] End-to-end tests pass
- [ ] Performance regression tests
- [ ] Documentation completeness
- [ ] Deployment verification

## 🚧 Troubleshooting Guide

### 🔧 Common Issues

**1. Version PR Not Auto-Generated**:
```bash
# Check GitHub Actions permissions
# Settings → Actions → General → Workflow permissions
# Enable "Read and write permissions"
# Enable "Allow GitHub Actions to create and approve pull requests"
```

**2. NPM Deployment Fails**:
```bash
# Verify NPM_TOKEN in repository secrets
# Check token permissions (publish access)
```

**3. Changeset Not Detected**:
```bash
# Verify .changeset/*.md file exists
# Check changeset is properly formatted
# Ensure PR targets develop branch
```

**4. Merge Conflicts**:
```bash
# Update feature branch from develop
git checkout feature/branch-name
git fetch origin
git rebase origin/develop
# Resolve conflicts
git add .
git rebase --continue
git push --force-with-lease origin feature/branch-name
```

## 📊 Success Metrics

### 🎯 Process Efficiency
- **Development Velocity**: Features per sprint
- **Quality Metrics**: Bug rate, test coverage
- **Automation Success**: % of automatic deployments
- **Team Satisfaction**: Developer experience ratings

### 📈 Release Quality
- **Time to Market**: Planning to production
- **Stability Metrics**: Post-release issues
- **Performance**: Benchmark improvements
- **User Adoption**: Feature usage analytics

This workflow ensures **enterprise-grade development practices** with **complete automation**, **full traceability**, and **professional release management** for the FigmaikR project. 🚀
