---
description: CSS/Tailwind to Figma 변환 규칙과 스타일 시스템 가이드
globs: ["**/*.{ts,tsx,js,jsx,css}"]
alwaysApply: false
---
---
description: CSS/Tailwind to Figma 변환 규칙과 스타일 시스템 가이드
globs: ["**/*.{ts,tsx,js,jsx,css}"]
---

# @easylogic/cssma 디자인 시스템

## 개요

@easylogic/cssma는 Tailwind CSS 스타일을 Figma 스타일로 변환하고, 그 반대로도 변환하는 라이브러리입니다. 이 규칙 문서는 개발자와 디자이너가 일관된 디자인 시스템을 유지하기 위한 가이드라인을 제공합니다.

## 주요 기능

### 1. Tailwind CSS → Figma 변환 (`processStyles`)

Tailwind CSS 클래스 문자열을 Figma 스타일 객체로 변환합니다.

```typescript
// 예시
import { processStyles } from '@easylogic/cssma';

const styles = processStyles('flex-col w-full bg-[#FF0000] rounded-lg');
// Figma 노드에 적용
node.layoutMode = styles.layout.layoutMode;
node.fills = styles.fills;
node.cornerRadius = styles.geometry.cornerRadius;
```

### 2. Figma → Tailwind CSS 변환 (`figmaToStyle`)

Figma 스타일 객체를 Tailwind CSS 클래스 문자열로 변환합니다.

```typescript
// 예시
import { figmaToStyle } from '@easylogic/cssma';

const tailwindClasses = figmaToStyle({
  layoutMode: "VERTICAL",
  fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }],
  cornerRadius: 8
});
// 결과: "flex-col bg-[#ff0000] rounded-lg"
```

## 지원하는 스타일

### 1. 레이아웃 속성

```typescript
// 방향 설정
flex-row        → layoutMode: "HORIZONTAL"
flex-col        → layoutMode: "VERTICAL"

// 크기 설정
w-full         → layoutSizingHorizontal: "FILL"
w-auto         → layoutSizingHorizontal: "HUG"
w-[100]        → width: 100
h-full         → layoutSizingVertical: "FILL"
h-auto         → layoutSizingVertical: "HUG"
h-[100]        → height: 100

// 정렬
justify-start   → primaryAxisAlignItems: "MIN"
justify-center  → primaryAxisAlignItems: "CENTER"
justify-end     → primaryAxisAlignItems: "MAX"
justify-between → primaryAxisAlignItems: "SPACE_BETWEEN"

items-start     → counterAxisAlignItems: "MIN"
items-center    → counterAxisAlignItems: "CENTER"
items-end       → counterAxisAlignItems: "MAX"
items-baseline  → counterAxisAlignItems: "BASELINE"

// 간격
gap-[16]       → itemSpacing: 16
p-[16]         → padding: 16 (모든 방향)
pt-[16]        → paddingTop: 16
pr-[16]        → paddingRight: 16
pb-[16]        → paddingBottom: 16
pl-[16]        → paddingLeft: 16
```

### 2. 색상 및 그라데이션

```typescript
// 단색
bg-[#FF0000]   → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
text-[#FF0000] → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
bg-transparent → fills: [] // 배경 채우기 제거
bg-white       → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
bg-black       → fills: [{ type: "SOLID", color: { r: 0, g: 0, b: 0 } }]

// 선형 그라데이션
bg-linear-to-r from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]

// 원형 그라데이션
bg-radial from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_RADIAL",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  centerX: 0.5,
  centerY: 0.5,
  radius: 0.5
}]
```

### 3. 타이포그래피

```typescript
// 폰트 크기
text-xs        → fontSize: 12
text-sm        → fontSize: 14
text-base      → fontSize: 16
text-lg        → fontSize: 18
text-xl        → fontSize: 20
text-2xl       → fontSize: 24
text-[20]      → fontSize: 20

// 폰트 두께
font-thin      → fontName: { family: "Inter", style: "Thin" }
font-normal    → fontName: { family: "Inter", style: "Regular" }
font-medium    → fontName: { family: "Inter", style: "Medium" }
font-bold      → fontName: { family: "Inter", style: "Bold" }

// 텍스트 정렬
text-left      → textAlignHorizontal: "LEFT"
text-center    → textAlignHorizontal: "CENTER"
text-right     → textAlignHorizontal: "RIGHT"
text-justify   → textAlignHorizontal: "JUSTIFIED"

// 텍스트 장식
underline      → textDecoration: "UNDERLINE"
line-through   → textDecoration: "STRIKETHROUGH"
no-underline   → textDecoration: "NONE"
```

### 4. 테두리 및 모서리

```typescript
// 테두리 두께
border-0        → borderWidth: 0
border          → borderWidth: 1
border-2        → borderWidth: 2
border-4        → borderWidth: 4
border-8        → borderWidth: 8

// 테두리 색상
border-[#FF0000] → strokes: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]

// 테두리 스타일
border-solid    → borderStyle: "SOLID"
border-dashed   → borderStyle: "DASHED"
border-dotted   → borderStyle: "DOTTED"

// 모서리 반경
rounded         → cornerRadius: 4
rounded-sm      → cornerRadius: 2
rounded-md      → cornerRadius: 6
rounded-lg      → cornerRadius: 8
rounded-xl      → cornerRadius: 12
rounded-2xl     → cornerRadius: 16
rounded-full    → cornerRadius: 9999
rounded-none    → cornerRadius: 0
```

### 5. 벡터 노드

벡터 노드를 사용하면 SVG 경로 데이터를 활용한 확장 가능한 벡터 그래픽을 만들 수 있습니다.

```typescript
// 벡터 노드 구조
{
  "type": "VECTOR",
  "name": string,
  "styles": string, // Tailwind CSS 스타일 문자열
  "paths": string[] // SVG 경로 문자열 배열
}

// 예시: 간단한 벡터
{
  "type": "VECTOR",
  "name": "Arrow Icon",
  "styles": "w-[24] h-[24] bg-[#111827]",
  "paths": [
    "M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"
  ]
}

// 예시: 여러 경로를 가진 벡터
{
  "type": "VECTOR",
  "name": "Check Circle Icon",
  "styles": "w-[24] h-[24] border-[#111827] border-2 bg-transparent",
  "paths": [
    "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z",
    "M10 17l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  ]
}
```

## 사용 예시

### 1. 기본 텍스트 스타일링

```typescript
{
  "type": "TEXT",
  "name": "Title",
  "styles": "text-xl font-bold text-[#111827] text-center",
  "text": "Hello World"
}
```

### 2. 카드 컴포넌트

```typescript
{
  "type": "FRAME",
  "name": "Card",
  "styles": "flex-col bg-white p-[16] gap-[12] rounded-lg border border-[#E5E7EB]",
  "children": [
    {
      "type": "TEXT",
      "name": "Title",
      "styles": "text-lg font-semibold text-[#111827]",
      "text": "Card Title"
    },
    {
      "type": "TEXT",
      "name": "Description",
      "styles": "text-base text-[#4B5563]",
      "text": "This is a description of the card content."
    }
  ]
}
```

### 3. 버튼 컴포넌트

```typescript
{
  "type": "FRAME",
  "name": "Button",
  "styles": "flex-row justify-center items-center bg-[#3B82F6] px-[16] py-[8] rounded-md",
  "children": [
    {
      "type": "TEXT",
      "name": "Button Text",
      "styles": "text-sm font-medium text-white",
      "text": "Click Me"
    }
  ]
}
```

## 배경 속성

### 배경 색상

```typescript
// 단색
bg-white       → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
bg-black       → fills: [{ type: "SOLID", color: { r: 0, g: 0, b: 0 } }]
bg-transparent → fills: []
bg-[#FF0000]   → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
bg-[rgb(255,0,0)] → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]

// 투명도 적용
bg-white/50    → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 }, opacity: 0.5 }]
bg-[#FF0000]/75 → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 }, opacity: 0.75 }]
```

### 그라데이션

```typescript
// 선형 그라데이션
bg-linear-to-r from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]

// 방향
bg-linear-to-t  → 위쪽 (0도)
bg-linear-to-tr → 오른쪽 상단 (45도)
bg-linear-to-r  → 오른쪽 (90도)
bg-linear-to-br → 오른쪽 하단 (135도)
bg-linear-to-b  → 아래쪽 (180도)
bg-linear-to-bl → 왼쪽 하단 (225도)
bg-linear-to-l  → 왼쪽 (270도)
bg-linear-to-tl → 왼쪽 상단 (315도)

// 다중 정지점 그라데이션
bg-linear-to-r from-[#FF0000] via-[#00FF00] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 0.5, color: { r: 0, g: 1, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]
```

## 제한 사항

1. 일부 Tailwind CSS 속성은 Figma에 직접적인 대응 항목이 없어 변환되지 않을 수 있습니다.
2. 복잡한 반응형 스타일은 지원되지 않습니다.
3. 일부 Figma 고유 기능은 Tailwind CSS로 완벽하게 변환되지 않을 수 있습니다.
4. 기본적으로 Inter 폰트 패밀리만 지원합니다.

## 모범 사례

1. **일관된 명명 규칙 사용**
   - 컴포넌트, 스타일, 변수 등에 일관된 명명 규칙을 적용하세요.
   - 의미 있는 이름을 사용하여 코드 가독성을 높이세요.

2. **디자인 토큰 활용**
   - 색상, 간격, 폰트 크기 등 디자인 요소를 토큰화하여 일관성을 유지하세요.
   - 변경 사항이 시스템 전체에 쉽게 반영되도록 하세요.

3. **성능 최적화**
   - 복잡한 중첩된 자동 레이아웃은 성능에 영향을 줄 수 있으므로 적절히 사용하세요.
   - 과도한 그라데이션이나 효과는 렌더링 성능에 영향을 줄 수 있습니다.

4. **접근성 고려**
   - 충분한 색상 대비율을 유지하세요.
   - 적절한 폰트 크기와 줄 높이를 사용하여 가독성을 확보하세요.
   - 의미 전달을 위해 색상만 사용하지 마세요.

5. **프리셋 값 활용**
   - 가능한 경우 임의 값보다 사전 정의된 값을 사용하세요.
   - 프리셋 값은 일관성을 유지하고 오류 가능성을 줄입니다.

## 추가 리소스

- [Tailwind CSS 공식 문서](mdc:https:/tailwindcss.com/docs)
- [Figma API 참조](mdc:https:/www.figma.com/developers/api)
- [Figma Plugin 개발 가이드](mdc:https:/www.figma.com/plugin-docs)
- [@easylogic/cssma GitHub 저장소](mdc:https:/github.com/figmaikr/@easylogic/cssma)