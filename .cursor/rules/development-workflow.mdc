---
description: 개발 워크플로우 및 자동화 가이드, GitHub Actions 워크플로우
globs: 
alwaysApply: false
---
# FigmaikR Development Workflow Guide

## 🎯 Complete Development Lifecycle

### 📋 Workflow Overview

```mermaid
graph TD
    A[Create Issue] --> B[Create Feature Branch]
    B --> C[Feature Development]
    C --> D[Add Changeset]
    D --> E[Feature PR → develop]
    E --> F[Close Feature Issue]
    F --> G[Create Release Issue]
    G --> H[Auto-generate Version PR]
    H --> I[Merge Version PR → develop]
    I --> J[Create develop → main PR]
    J --> K[Link Release Issue]
    K --> L[Merge to main branch]
    L --> M[Auto NPM Deployment]
```

## 🚀 Step-by-Step Development Process

### 1️⃣ Issue Creation and Management

**GitHub Issue Creation Guide:**

```bash
# Use issue templates
# 1. GitHub → Issues → New Issue
# 2. Select appropriate template:
#    - Feature Request
#    - Bug Report  
#    - Enhancement
#    - Documentation

# Include required information:
# - Clear title
# - Detailed description
# - Label assignment (feature, bug, enhancement, docs)
# - Assignee designation (@username)
# - Milestone setting (if applicable)
# - Project board connection
```

**Issue Labeling System:**

| Label | Purpose | Example |
|-------|---------|---------|
| `feature` | New functionality | Add CSS Grid support |
| `bug` | Bug fixes | Parser error fix |
| `enhancement` | Existing feature improvement | Performance optimization |
| `docs` | Documentation work | API documentation update |
| `breaking` | Breaking changes | API structure changes |
| `priority:high` | High priority | Security issues |
| `priority:low` | Low priority | Code cleanup |

### 2️⃣ Feature Development Process

**Branch Creation and Development:**

```bash
# 1. Create feature branch from develop
git checkout develop
git pull origin develop
git checkout -b feature/issue-123-css-grid-support

# Branch naming convention:
# feature/issue-{number}-{brief-description}
# fix/issue-{number}-{brief-description}
# docs/issue-{number}-{brief-description}
# enhancement/issue-{number}-{brief-description}

# 2. Feature development
# ... write code ...
# ... write tests ...
# ... update documentation ...

# 3. Commit message rules during development
git commit -m "feat: implement CSS Grid layout support

- Add grid container and item style processing
- Support grid-template-columns and grid-template-rows
- Add comprehensive test coverage
- Update documentation with examples

Closes #123"
```

**Commit Message Convention:**

```bash
# Format: type(scope): description
#
# body (optional)
#
# footer (optional)

# Types:
# feat: new feature
# fix: bug fix
# docs: documentation changes
# style: code formatting (no functionality change)
# refactor: code refactoring
# test: adding/modifying tests
# chore: build process, tool configuration, etc.

# Example:
git commit -m "feat(converter): add CSS Grid support

- Implement grid-template-columns parsing
- Add grid-gap to Figma spacing conversion
- Support responsive grid layouts
- Add error handling for invalid grid values

Closes #123"
```

### 3️⃣ Changeset Management

**Changeset Creation Guide:**

```bash
# 1. Create changeset
pnpm changeset

# 2. Package selection
# ✅ cssma (main library)
# ❌ cssma-plugin (internal app)
# ❌ figmai-landing (internal app)

# 3. Change type selection
# patch: bug fixes, documentation updates, internal refactoring
# minor: new features, API additions, non-breaking improvements
# major: breaking changes, API removal, structural changes

# 4. Write change description
```

**Changeset File Example:**

```markdown
# .changeset/brave-lions-dance.md
---
"cssma": minor
---

Add CSS Grid layout support

- Implement grid-template-columns and grid-template-rows parsing
- Add grid-gap to Figma spacing conversion  
- Support responsive grid layouts with auto-fit and auto-fill
- Add comprehensive error handling for invalid grid values
- Include 15+ new test cases for grid functionality
- Update documentation with grid layout examples

This enhancement allows designers to use modern CSS Grid layouts
in their Tailwind classes and see them properly converted to 
Figma's auto-layout system.
```

**Verify Changeset Auto-addition:**

```bash
# Check if changeset file is automatically generated
ls .changeset/

# Expected result:
# .changeset/
# ├── config.json
# ├── brave-lions-dance.md  # newly created changeset
# └── README.md

# Check changeset status
pnpm changeset:status
```

### 4️⃣ Feature PR Creation and Merge

**Pull Request Creation:**

```bash
# 1. Push branch
git push origin feature/issue-123-css-grid-support

# 2. Create PR on GitHub
# - Base: develop (NOT main)
# - Head: feature/issue-123-css-grid-support
# - Title: "feat: Add CSS Grid layout support (#123)"
# - Description: issue link, change summary, test results
```

**PR Template Example:**

```markdown
## 📋 Summary
Implements CSS Grid layout support for Tailwind to Figma conversion.

## 🔗 Related Issue
Closes #123

## 🚀 Changes Made
- ✅ Add grid-template-columns parsing
- ✅ Add grid-template-rows parsing  
- ✅ Support grid-gap conversion
- ✅ Add responsive grid support
- ✅ Comprehensive test coverage (15+ tests)
- ✅ Documentation updates

## 🧪 Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Performance impact assessed

## 📦 Changeset
- [x] Changeset added (.changeset/brave-lions-dance.md)
- [x] Version type: minor
- [x] Breaking changes: None

## 📸 Screenshots/Demo
[Include relevant screenshots or demo links]

## ✅ Checklist
- [x] Code follows project conventions
- [x] Tests added/updated
- [x] Documentation updated
- [x] Changeset included
- [x] No breaking changes (or properly documented)
```

**PR Review and Merge:**

```bash
# 1. After code review completion
# 2. Verify CI/CD checks pass
# 3. Merge to develop branch (Squash merge recommended)
# 4. Delete feature branch
```

### 5️⃣ Close Feature Issue

**Issue Closing Process:**

```bash
# 1. Issue automatically closes when PR is merged (with "Closes #123" in commit message)
# 2. Manual closing if needed:
#    - Click "Close issue" on issue page
#    - Add closing comment

# Closing comment example:
# "✅ Completed in PR #456
# 
# CSS Grid support has been successfully implemented with:
# - Full grid-template parsing
# - Responsive grid support  
# - Comprehensive test coverage
# - Updated documentation
#
# Available in next release."
```

### 6️⃣ Create Release Issue

**Release Planning Issue:**

```bash
# Create release issue when sufficient changes accumulate in develop branch

# Issue title: "Release v0.4.0 - CSS Grid & Performance Improvements"
# Labels: release, milestone
# Assignee: Release manager
```

**Release Issue Template:**

```markdown
## 🚀 Release v0.4.0 Planning

### 📋 Included Features
- [ ] #123 CSS Grid layout support
- [ ] #124 Performance optimization for large stylesheets  
- [ ] #125 Enhanced error messages
- [ ] #126 TypeScript strict mode support

### 🐛 Bug Fixes
- [ ] #127 Fix parser edge case with complex selectors
- [ ] #128 Resolve memory leak in preview mode

### 📚 Documentation
- [ ] #129 Update API documentation
- [ ] #130 Add CSS Grid examples

### ✅ Release Checklist
- [ ] All feature PRs merged to develop
- [ ] Version PR created and reviewed
- [ ] CHANGELOG.md updated
- [ ] Documentation updated
- [ ] Performance benchmarks run
- [ ] Breaking changes documented (if any)
- [ ] Release notes prepared

### 📦 Expected Version Impact
- **Type**: Minor (new features, no breaking changes)
- **Current**: v0.3.2
- **Target**: v0.4.0

### 🗓️ Timeline
- **Feature freeze**: 2024-01-15
- **Version PR**: 2024-01-16  
- **Release**: 2024-01-18
```

### 7️⃣ Auto-generate Version PR

**GitHub Actions Automation:**

```bash
# Version PR automatically created when changesets accumulate in develop branch
# Or manual trigger available

# Manual trigger method:
# 1. GitHub → Actions → "Version PR" workflow
# 2. Click "Run workflow"
# 3. Select Branch: develop
# 4. Execute "Run workflow"
```

**Version PR Content:**

```markdown
# PR title: "chore: version packages"

## 📦 Package Updates

### cssma@0.4.0

#### 🚀 Minor Changes
- Add CSS Grid layout support (#123)
- Enhance performance for large stylesheets (#124)
- Add TypeScript strict mode support (#126)

#### 🐛 Patch Changes  
- Fix parser edge case with complex selectors (#127)
- Resolve memory leak in preview mode (#128)
- Update API documentation (#129)

## 📋 Files Changed
- packages/cssma/package.json (0.3.2 → 0.4.0)
- packages/cssma/CHANGELOG.md (updated)
- .changeset/ (processed and removed)

## ✅ Automated Changes
- [x] Version bumps calculated
- [x] CHANGELOG.md generated
- [x] Changeset files processed
- [x] Package.json updated
```

### 8️⃣ Merge Version PR and Verification

**Version PR Merge Process:**

```bash
# 1. Review Version PR
#    - Verify package.json version
#    - Review CHANGELOG.md content
#    - Check for missing changes

# 2. Merge Version PR (to develop branch)
#    - Use Merge commit (preserve changeset history)

# 3. Verify develop branch state
git checkout develop
git pull origin develop

# Check package.json version
cat packages/cssma/package.json | grep version

# Verify CHANGELOG.md update  
head -20 packages/cssma/CHANGELOG.md

# Verify changeset files are removed
ls .changeset/
# Result: should only have config.json, README.md
```

### 9️⃣ Create develop → main PR

**Production Release PR:**

```bash
# 1. Create develop → main PR
# Base: main
# Head: develop  
# Title: "Release v0.4.0 - CSS Grid & Performance Improvements"
```

**Release PR Template:**

```markdown
## 🚀 Release v0.4.0

### 📋 Summary
This release includes CSS Grid support, performance improvements, and several bug fixes.

### 🔗 Related Release Issue
Closes #131 (Release v0.4.0 planning issue)

### 🚀 New Features
- **CSS Grid Support**: Full grid-template parsing and conversion
- **Performance Optimization**: 40% faster processing for large stylesheets
- **TypeScript Strict Mode**: Enhanced type safety

### 🐛 Bug Fixes
- Fixed parser edge case with complex CSS selectors
- Resolved memory leak in live preview mode
- Improved error handling for invalid grid values

### 📦 Version Changes
- cssma: 0.3.2 → 0.4.0

### ✅ Pre-Release Checklist
- [x] All features tested in develop
- [x] Version PR merged successfully
- [x] CHANGELOG.md updated
- [x] Documentation updated
- [x] No breaking changes
- [x] Performance benchmarks passed

### 🧪 Testing
- [x] Unit tests: 98% coverage
- [x] Integration tests: All passing
- [x] E2E tests: All passing
- [x] Performance tests: Within thresholds

### 📚 Documentation
- [x] API docs updated
- [x] Examples added for new features
- [x] Migration guide (if needed)

### 🚨 Breaking Changes
None in this release.

### 📈 Performance Impact
- 40% faster CSS parsing
- 25% reduced memory usage
- Improved error handling performance
```

### 🔟 Link Release Issue

**Connect PR with Release Issue:**

```bash
# Link release issue in PR description
# Add "Closes #131" or "Resolves #131"

# Add PR link to release issue
# Comment "🔗 Release PR: #456"
```

### 1️⃣1️⃣ Merge to main Branch

**Production Deployment Trigger:**

```bash
# 1. Final review of Release PR
#    - Verify all checklist items completed
#    - Review release notes
#    - Confirm version number

# 2. Merge to main branch
#    - Use Merge commit (preserve release history)
#    - Auto deployment starts immediately after merge

# 3. Post-merge verification
#    - Monitor GitHub Actions execution status
#    - Verify NPM deployment success
#    - Confirm GitHub Release creation
#    - Check Git tag creation
```

### 1️⃣2️⃣ Auto NPM Deployment Process

**GitHub Actions Automation:**

```yaml
# .github/workflows/release.yml
name: Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build packages
        run: pnpm build
        
      - name: Run tests
        run: pnpm test
        
      - name: Publish to NPM
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: Release v${{ env.PACKAGE_VERSION }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false
```

**Post-deployment Verification:**

```bash
# 1. Verify NPM deployment
npm view cssma version
# Result: 0.4.0

# 2. Check GitHub Release
# GitHub → Releases → Check latest release

# 3. Verify Git tags
git fetch --tags
git tag -l | tail -5

# 4. Deployment notifications
# - Slack/Discord channel notifications
# - Documentation site updates
# - User announcements
```

## 🔧 Automation Tools and Configuration

### GitHub Actions Workflows

**1. Version PR Workflow (.github/workflows/version-pr.yml):**

```yaml
name: Version PR

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run on'
        required: false
        default: 'develop'

jobs:
  version-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Create Version PR
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          commit: 'chore: version packages'
          title: 'chore: version packages'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

**2. Release Workflow (.github/workflows/release.yml):**

```yaml
name: Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        run: pnpm build
        
      - name: Test
        run: pnpm test
        
      - name: Publish
        run: pnpm changeset:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

### Changeset Configuration

**.changeset/config.json:**

```json
{
  "$schema": "https://unpkg.com/@changesets/config@2.3.1/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "develop",
  "updateInternalDependencies": "patch",
  "ignore": ["cssma-plugin", "figmai-landing"],
  "snapshot": {
    "useCalculatedVersion": true,
    "prereleaseTemplate": null
  }
}
```

### Branch Protection Rules

**main branch:**
- Require pull request reviews (1+ reviewers)
- Require status checks to pass
- Require branches to be up to date
- Restrict pushes that create files larger than 100MB
- Do not allow force pushes
- Do not allow deletions

**develop branch:**
- Require pull request reviews (1+ reviewers)  
- Require status checks to pass
- Allow force pushes (when necessary)

## 📋 Checklist Templates

### Feature Development Checklist

```markdown
## 🚀 Feature Development Checklist

### 📋 Planning
- [ ] Create GitHub issue (labels, assignee designation)
- [ ] Clarify requirements
- [ ] Decide technical approach

### 💻 Development  
- [ ] Create feature branch (from develop)
- [ ] Implement functionality
- [ ] Write unit tests
- [ ] Write integration tests
- [ ] Update documentation

### 📦 Changeset
- [ ] Create changeset (pnpm changeset)
- [ ] Select appropriate version type (patch/minor/major)
- [ ] Write clear change description
- [ ] Verify .changeset/xxxx.md file

### 🔄 Pull Request
- [ ] Create feature → develop PR
- [ ] Complete PR template
- [ ] Request code review
- [ ] Pass CI/CD checks
- [ ] Merge PR

### ✅ Completion
- [ ] Close feature issue
- [ ] Clean up branches
```

### Release Checklist

```markdown
## 🚀 Release Checklist

### 📋 Pre-Release
- [ ] Create release issue based on develop branch
- [ ] Confirm included features/fixes
- [ ] Determine version number
- [ ] Draft release notes

### 🔄 Version Management
- [ ] Verify changeset accumulation in develop
- [ ] Confirm Version PR auto-generation
- [ ] Verify package.json version update
- [ ] Verify CHANGELOG.md update
- [ ] Merge Version PR → develop

### 🚀 Release Process
- [ ] Create develop → main PR
- [ ] Link release issue
- [ ] Execute final testing
- [ ] Merge PR → main
- [ ] Verify auto NPM deployment

### ✅ Post-Release
- [ ] Verify NPM package deployment
- [ ] Confirm GitHub Release creation
- [ ] Verify Git tag creation
- [ ] Close release issue
- [ ] Team notifications and announcements
```

## 🛠️ Troubleshooting Guide

### Common Problem Solutions

**1. Changeset not being created:**
```bash
# Error when running pnpm changeset command
# Solution: Check .changeset/config.json
# Solution: Check and update pnpm version
```

**2. Version PR not auto-generating:**
```bash
# Check GitHub Actions permissions
# Settings → Actions → General → Workflow permissions
# Select "Read and write permissions"
# Check "Allow GitHub Actions to create and approve pull requests"
```

**3. NPM deployment failure:**
```bash
# Check NPM_TOKEN
# GitHub → Settings → Secrets → Update NPM_TOKEN
# Verify permissions with npm whoami
```

**4. Merge conflict resolution:**
```bash
# Update develop branch
git checkout develop
git pull origin develop

# Rebase from feature branch
git checkout feature/your-branch
git rebase develop

# After resolving conflicts
git add .
git rebase --continue
git push --force-with-lease origin feature/your-branch
```

Following this workflow ensures a systematic and stable development process, reducing errors and increasing efficiency through automation.
