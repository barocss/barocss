import{_ as e,c as a,o as t,a2 as i}from"./chunks/framework.C0Fyqt99.js";const k=JSON.parse('{"title":"Hover, focus, and other states","description":"","frontmatter":{},"headers":[],"relativePath":"guide/hover-focus-and-other-states.md","filePath":"guide/hover-focus-and-other-states.md"}'),n={name:"guide/hover-focus-and-other-states.md"};function d(l,s,o,r,h,c){return t(),a("div",null,[...s[0]||(s[0]=[i(`<h1 id="hover-focus-and-other-states" tabindex="-1">Hover, focus, and other states <a class="header-anchor" href="#hover-focus-and-other-states" aria-label="Permalink to &quot;Hover, focus, and other states&quot;">​</a></h1><p>Using utilities to style elements on hover, focus, and more.</p><p>Every utility class in Tailwind can be applied <em>conditionally</em> by adding a variant to the beginning of the class name that describes the condition you want to target.</p><p>For example, to apply the <code>bg-sky-700</code> class on hover, use the <code>hover:bg-sky-700</code> class:</p><p>Hover over this button to see the background color change</p><p>Save changes</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-sky-500 hover:bg-sky-700 ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Save changes&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>How does this compare to traditional CSS?</p><p>When writing CSS the traditional way, a single class name would do different things based on the current state:</p><p>Traditionally the same class name applies different styles on hover</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.btn-primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#0ea5e9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.btn-primary:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#0369a1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In Tailwind, rather than adding the styles for a hover state to an existing class, you add another class to the element that <em>only</em> does something on hover:</p><p>In Tailwind, separate classes are used for the default state and the hover state</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.bg-sky-500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#0ea5e9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.hover</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bg-sky-700:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#0369a1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Notice how <code>hover:bg-sky-700</code> <em>only</em> defines styles for the <code>:hover</code> state? It does nothing by default, but as soon as you hover over an element with that class, the background color will change to <code>sky-700</code>.</p><p>This is what we mean when we say a utility class can be applied <em>conditionally</em> — by using variants you can control exactly how your design behaves in different states, without ever leaving your HTML.</p><p>Tailwind includes variants for just about everything you&#39;ll ever need, including:</p><ul><li><a href="./variants/pseudo-classes.html">Pseudo-classes</a>, like <code>:hover</code>, <code>:focus</code>, <code>:first-child</code>, and <code>:required</code></li><li><a href="./variants/pseudo-elements.html">Pseudo-elements</a>, like <code>::before</code>, <code>::after</code>, <code>::placeholder</code>, and <code>::selection</code></li><li><a href="./variants/media-queries.html">Media and feature queries</a>, like responsive breakpoints, dark mode, and <code>prefers-reduced-motion</code></li><li><a href="./variants/attribute-selectors.html">Attribute selectors</a>, like <code>[dir=&quot;rtl&quot;]</code> and <code>[open]</code></li><li><a href="./variants/child-selectors.html">Child selectors</a>, like <code>&amp; &gt; *</code> and <code>&amp; *</code></li></ul><p>These variants can even be stacked to target more specific situations, for example changing the background color in dark mode, at the medium breakpoint, on hover:</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dark:md:hover:bg-fuchsia-600 ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Save changes&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>In this guide you&#39;ll learn about every variant available in the framework, how to use them with your own custom classes, and even how to create your own.</p><h2 id="quick-reference" tabindex="-1">Quick reference <a class="header-anchor" href="#quick-reference" aria-label="Permalink to &quot;Quick reference&quot;">​</a></h2><p>Here&#39;s a quick reference of the most commonly used variants:</p><table tabindex="0"><thead><tr><th>Variant</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>hover:</code></td><td>On hover</td><td><code>hover:bg-blue-500</code></td></tr><tr><td><code>focus:</code></td><td>On focus</td><td><code>focus:ring-2</code></td></tr><tr><td><code>active:</code></td><td>On active</td><td><code>active:scale-95</code></td></tr><tr><td><code>disabled:</code></td><td>When disabled</td><td><code>disabled:opacity-50</code></td></tr><tr><td><code>dark:</code></td><td>In dark mode</td><td><code>dark:bg-gray-800</code></td></tr><tr><td><code>sm:</code></td><td>Small screens+</td><td><code>sm:text-lg</code></td></tr><tr><td><code>md:</code></td><td>Medium screens+</td><td><code>md:flex</code></td></tr><tr><td><code>lg:</code></td><td>Large screens+</td><td><code>lg:grid-cols-3</code></td></tr><tr><td><code>first:</code></td><td>First child</td><td><code>first:pt-0</code></td></tr><tr><td><code>last:</code></td><td>Last child</td><td><code>last:pb-0</code></td></tr><tr><td><code>odd:</code></td><td>Odd children</td><td><code>odd:bg-gray-50</code></td></tr><tr><td><code>even:</code></td><td>Even children</td><td><code>even:bg-white</code></td></tr></tbody></table>`,24)])])}const u=e(n,[["render",d]]);export{k as __pageData,u as default};
