---
description: CSS/Tailwind to Figma 변환 규칙과 스타일 시스템 가이드
globs: ["**/*.{ts,tsx,js,jsx,css}"]
alwaysApply: false
---
---
description: CSS/Tailwind to Figma Conversion Rules and Design System Guide
globs: ["**/*.{ts,tsx,js,jsx,css}"]
---

# cssma Design System

## Overview

cssma is a library that converts Tailwind CSS styles to Figma styles and vice versa. This rule document provides guidelines for developers and designers to maintain a consistent design system.

## Key Features

### 1. Tailwind CSS → Figma Conversion (`processCssStyles`)

Converts Tailwind CSS class strings to Figma style objects.

```typescript
// Example
import { processCssStyles } from 'cssma';

const styles = processCssStyles('flex-col w-full bg-[#FF0000] rounded-lg');
// Apply to Figma node
node.layoutMode = styles.layout.layoutMode;
node.fills = styles.fills;
node.cornerRadius = styles.geometry.cornerRadius;
```

### 2. Figma → Tailwind CSS Conversion (`figmaToCss`)

Converts Figma style objects to Tailwind CSS class strings.

```typescript
// Example
import { figmaToCss } from 'cssma';

const tailwindClasses = figmaToCss({
  layoutMode: "VERTICAL",
  fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }],
  cornerRadius: 8
});
// Result: "flex-col bg-[#ff0000] rounded-lg"
```

## Supported Styles

### 1. Layout Properties

```typescript
// Direction settings
flex-row        → layoutMode: "HORIZONTAL"
flex-col        → layoutMode: "VERTICAL"

// Size settings
w-full         → layoutSizingHorizontal: "FILL"
w-auto         → layoutSizingHorizontal: "HUG"
w-[100]        → width: 100
h-full         → layoutSizingVertical: "FILL"
h-auto         → layoutSizingVertical: "HUG"
h-[100]        → height: 100

// Alignment
justify-start   → primaryAxisAlignItems: "MIN"
justify-center  → primaryAxisAlignItems: "CENTER"
justify-end     → primaryAxisAlignItems: "MAX"
justify-between → primaryAxisAlignItems: "SPACE_BETWEEN"

items-start     → counterAxisAlignItems: "MIN"
items-center    → counterAxisAlignItems: "CENTER"
items-end       → counterAxisAlignItems: "MAX"
items-baseline  → counterAxisAlignItems: "BASELINE"

// Spacing
gap-[16]       → itemSpacing: 16
p-[16]         → padding: 16 (all directions)
pt-[16]        → paddingTop: 16
pr-[16]        → paddingRight: 16
pb-[16]        → paddingBottom: 16
pl-[16]        → paddingLeft: 16
```

### 2. Colors and Gradients

```typescript
// Solid colors
bg-[#FF0000]   → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
text-[#FF0000] → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
bg-transparent → fills: [] // Remove background fill
bg-white       → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
bg-black       → fills: [{ type: "SOLID", color: { r: 0, g: 0, b: 0 } }]

// Linear gradients
bg-linear-to-r from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]

// Radial gradients
bg-radial from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_RADIAL",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  centerX: 0.5,
  centerY: 0.5,
  radius: 0.5
}]
```

### 3. Typography

```typescript
// Font sizes
text-xs        → fontSize: 12
text-sm        → fontSize: 14
text-base      → fontSize: 16
text-lg        → fontSize: 18
text-xl        → fontSize: 20
text-2xl       → fontSize: 24
text-[20]      → fontSize: 20

// Font weights
font-thin      → fontName: { family: "Inter", style: "Thin" }
font-normal    → fontName: { family: "Inter", style: "Regular" }
font-medium    → fontName: { family: "Inter", style: "Medium" }
font-bold      → fontName: { family: "Inter", style: "Bold" }

// Text alignment
text-left      → textAlignHorizontal: "LEFT"
text-center    → textAlignHorizontal: "CENTER"
text-right     → textAlignHorizontal: "RIGHT"
text-justify   → textAlignHorizontal: "JUSTIFIED"

// Text decoration
underline      → textDecoration: "UNDERLINE"
line-through   → textDecoration: "STRIKETHROUGH"
no-underline   → textDecoration: "NONE"
```

### 4. Borders and Corners

```typescript
// Border width
border-0        → borderWidth: 0
border          → borderWidth: 1
border-2        → borderWidth: 2
border-4        → borderWidth: 4
border-8        → borderWidth: 8

// Border colors
border-[#FF0000] → strokes: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]

// Border styles
border-solid    → borderStyle: "SOLID"
border-dashed   → borderStyle: "DASHED"
border-dotted   → borderStyle: "DOTTED"

// Corner radius
rounded         → cornerRadius: 4
rounded-sm      → cornerRadius: 2
rounded-md      → cornerRadius: 6
rounded-lg      → cornerRadius: 8
rounded-xl      → cornerRadius: 12
rounded-2xl     → cornerRadius: 16
rounded-full    → cornerRadius: 9999
rounded-none    → cornerRadius: 0
```

### 5. Vector Nodes

Vector nodes allow you to create scalable vector graphics using SVG path data.

```typescript
// Vector node structure
{
  "type": "VECTOR",
  "name": string,
  "styles": string, // Tailwind CSS style string
  "paths": string[] // SVG path string array
}

// Example: Simple vector
{
  "type": "VECTOR",
  "name": "Arrow Icon",
  "styles": "w-[24] h-[24] bg-[#111827]",
  "paths": [
    "M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"
  ]
}

// Example: Vector with multiple paths
{
  "type": "VECTOR",
  "name": "Check Circle Icon",
  "styles": "w-[24] h-[24] border-[#111827] border-2 bg-transparent",
  "paths": [
    "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z",
    "M10 17l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  ]
}
```

## Usage Examples

### 1. Basic Text Styling

```typescript
{
  "type": "TEXT",
  "name": "Title",
  "styles": "text-xl font-bold text-[#111827] text-center",
  "text": "Hello World"
}
```

### 2. Card Component

```typescript
{
  "type": "FRAME",
  "name": "Card",
  "styles": "flex-col bg-white p-[16] gap-[12] rounded-lg border border-[#E5E7EB]",
  "children": [
    {
      "type": "TEXT",
      "name": "Title",
      "styles": "text-lg font-semibold text-[#111827]",
      "text": "Card Title"
    },
    {
      "type": "TEXT",
      "name": "Description",
      "styles": "text-base text-[#4B5563]",
      "text": "This is a description of the card content."
    }
  ]
}
```

### 3. Button Component

```typescript
{
  "type": "FRAME",
  "name": "Button",
  "styles": "flex-row justify-center items-center bg-[#3B82F6] px-[16] py-[8] rounded-md",
  "children": [
    {
      "type": "TEXT",
      "name": "Button Text",
      "styles": "text-sm font-medium text-white",
      "text": "Click Me"
    }
  ]
}
```

## Background Properties

### Background Colors

```typescript
// Solid colors
bg-white       → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }]
bg-black       → fills: [{ type: "SOLID", color: { r: 0, g: 0, b: 0 } }]
bg-transparent → fills: []
bg-[#FF0000]   → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]
bg-[rgb(255,0,0)] → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 } }]

// Opacity applied
bg-white/50    → fills: [{ type: "SOLID", color: { r: 1, g: 1, b: 1 }, opacity: 0.5 }]
bg-[#FF0000]/75 → fills: [{ type: "SOLID", color: { r: 1, g: 0, b: 0 }, opacity: 0.75 }]
```

### Gradients

```typescript
// Linear gradients
bg-linear-to-r from-[#FF0000] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]

// Directions
bg-linear-to-t  → Top (0 degrees)
bg-linear-to-tr → Top right (45 degrees)
bg-linear-to-r  → Right (90 degrees)
bg-linear-to-br → Bottom right (135 degrees)
bg-linear-to-b  → Bottom (180 degrees)
bg-linear-to-bl → Bottom left (225 degrees)
bg-linear-to-l  → Left (270 degrees)
bg-linear-to-tl → Top left (315 degrees)

// Multi-stop gradients
bg-linear-to-r from-[#FF0000] via-[#00FF00] to-[#0000FF] →
fills: [{
  type: "GRADIENT_LINEAR",
  gradientStops: [
    { position: 0, color: { r: 1, g: 0, b: 0 } },
    { position: 0.5, color: { r: 0, g: 1, b: 0 } },
    { position: 1, color: { r: 0, g: 0, b: 1 } }
  ],
  gradientTransform: [[1, 0, 0], [0, 1, 0]]
}]
```

## Limitations

1. Some Tailwind CSS properties may not have direct counterparts in Figma and may not be converted.
2. Complex responsive styles are not supported.
3. Some Figma-specific features may not be perfectly converted to Tailwind CSS.
4. Only the Inter font family is supported by default.

## Best Practices

1. **Use Consistent Naming Conventions**
   - Apply consistent naming conventions to components, styles, variables, etc.
   - Use meaningful names to improve code readability.

2. **Utilize Design Tokens**
   - Tokenize design elements like colors, spacing, font sizes to maintain consistency.
   - Ensure changes are easily reflected throughout the system.

3. **Performance Optimization**
   - Use complex nested auto layouts judiciously as they can impact performance.
   - Excessive gradients or effects can affect rendering performance.

4. **Consider Accessibility**
   - Maintain sufficient color contrast ratios.
   - Use appropriate font sizes and line heights to ensure readability.
   - Don't rely solely on color to convey meaning.

5. **Leverage Preset Values**
   - Use predefined values over arbitrary values when possible.
   - Preset values maintain consistency and reduce error possibilities.

## Additional Resources

- [Tailwind CSS Official Documentation](mdc:https:/tailwindcss.com/docs)
- [Figma API Reference](mdc:https:/www.figma.com/developers/api)
- [Figma Plugin Development Guide](mdc:https:/www.figma.com/plugin-docs)
- [cssma GitHub Repository](mdc:https:/github.com/figmaikr/cssma)