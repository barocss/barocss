---
description: FigmaikR 프로젝트 관리 가이드
globs: 
alwaysApply: false
---
# FigmaikR 프로젝트 관리 가이드

## 프로젝트 개요

FigmaikR는 Tailwind CSS와 Figma 간의 양방향 변환을 지원하는 디자인 시스템 툴킷입니다.

### 주요 구성 요소

- **packages/cssma**: 핵심 라이브러리 (NPM 패키지)
- **apps/cssma-plugin**: Figma 플러그인
- **apps/figmai-landing**: 랜딩 페이지
- **docs/**: 문서화

## 개발 워크플로우

### 1. 버전 관리 (Changeset)

모든 패키지 변경사항은 Changeset을 통해 관리됩니다.

```bash
# 새로운 변경사항 추가
pnpm changeset

# 현재 changeset 상태 확인
pnpm changeset:status

# 버전 업데이트 (로컬 테스트용)
pnpm changeset:version

# 패키지 배포 (CI에서 자동 실행)
pnpm release
```

#### Changeset 타입 가이드

- **patch**: 버그 수정, 문서 업데이트, 내부 리팩토링
- **minor**: 새로운 기능 추가, API 확장
- **major**: 호환성을 깨는 변경사항

### 2. 자동 배포 시스템

GitHub Actions를 통한 완전 자동화된 배포 파이프라인:

1. **main 브랜치 푸시** → GitHub Actions 트리거
2. **Changeset 감지** → 자동 release PR 생성
3. **PR 머지** → NPM 배포 + GitHub 릴리즈 생성

#### 배포 관련 파일

- [.github/workflows/release.yml](mdc:.github/workflows/release.yml): 자동 배포 워크플로우
- [.changeset/config.json](mdc:.changeset/config.json): Changeset 설정
- [package.json](mdc:package.json): 루트 패키지 설정

### 3. 패키지 구조

#### 핵심 라이브러리 (packages/cssma)

```typescript
// 주요 진입점
import { processCssStyles, figmaToCss } from 'cssma';

// 스타일 변환
const figmaStyles = processCssStyles('flex-col w-full bg-blue-500');
const tailwindClasses = figmaToCss(figmaNode);
```

주요 파일:
- [packages/cssma/src/index.ts](mdc:packages/cssma/src/index.ts): 메인 진입점
- [packages/cssma/package.json](mdc:packages/cssma/package.json): 패키지 설정
- [packages/cssma/CHANGELOG.md](mdc:packages/cssma/CHANGELOG.md): 변경 로그

#### Figma 플러그인 (apps/cssma-plugin)

실시간 CSS 미리보기 시스템이 포함된 Figma 플러그인:

주요 컴포넌트:
- [apps/cssma-plugin/src/components/CssConverter.tsx](mdc:apps/cssma-plugin/src/components/CssConverter.tsx): CSS 변환기
- [apps/cssma-plugin/src/components/LivePreview.tsx](mdc:apps/cssma-plugin/src/components/LivePreview.tsx): 실시간 미리보기
- [apps/cssma-plugin/src/hooks/useLocalStorage.ts](mdc:apps/cssma-plugin/src/hooks/useLocalStorage.ts): 로컬 스토리지 훅

## 코딩 표준

### 1. TypeScript 사용

모든 새로운 코드는 TypeScript로 작성하며, 엄격한 타입 검사를 적용합니다.

```typescript
// 좋은 예: 명확한 타입 정의
interface FigmaStyleProps {
  layoutMode?: 'HORIZONTAL' | 'VERTICAL';
  fills?: Paint[];
  cornerRadius?: number;
}

// 나쁜 예: any 타입 사용
function processStyles(styles: any): any {
  // ...
}
```

### 2. 컴포넌트 구조

React 컴포넌트는 다음 구조를 따릅니다:

```typescript
// 1. 임포트
import React, { useState, useEffect } from 'react';
import { processCssStyles } from 'cssma';

// 2. 타입 정의
interface ComponentProps {
  className?: string;
  onStyleChange?: (styles: string) => void;
}

// 3. 컴포넌트 정의
export const Component: React.FC<ComponentProps> = ({
  className,
  onStyleChange
}) => {
  // 4. 상태 및 훅
  const [styles, setStyles] = useState('');
  
  // 5. 이벤트 핸들러
  const handleChange = (value: string) => {
    setStyles(value);
    onStyleChange?.(value);
  };
  
  // 6. 렌더링
  return (
    <div className={className}>
      {/* 컴포넌트 내용 */}
    </div>
  );
};
```

### 3. 에러 처리

모든 비동기 작업과 외부 API 호출에는 적절한 에러 처리를 포함해야 합니다:

```typescript
try {
  const result = await processCssStyles(cssString);
  setStyles(result);
} catch (error) {
  console.error('Style processing failed:', error);
  setError('스타일 처리 중 오류가 발생했습니다.');
}
```

## 테스트 전략

### 1. 단위 테스트

각 유틸리티 함수와 컴포넌트에 대한 단위 테스트를 작성합니다:

```bash
# 테스트 실행
pnpm test

# 테스트 커버리지
pnpm test:coverage

# 테스트 UI
pnpm test:ui
```

### 2. 통합 테스트

Figma 플러그인의 경우 실제 Figma API와의 통합 테스트를 포함합니다.

## 문서화

### 1. README 업데이트

새로운 기능 추가 시 해당 패키지의 README.md를 업데이트합니다:

- [README.md](mdc:README.md): 프로젝트 전체 개요
- [packages/cssma/README.md](mdc:packages/cssma/README.md): 라이브러리 사용법
- [apps/cssma-plugin/README.md](mdc:apps/cssma-plugin/README.md): 플러그인 사용법

### 2. API 문서

TypeScript 타입 정의와 JSDoc 주석을 통해 API 문서를 자동 생성합니다.

```typescript
/**
 * Tailwind CSS 클래스를 Figma 스타일로 변환합니다.
 * 
 * @param cssClasses - 변환할 Tailwind CSS 클래스 문자열
 * @returns Figma 스타일 객체
 * 
 * @example
 * ```typescript
 * const styles = processCssStyles('flex-col w-full bg-blue-500');
 * node.layoutMode = styles.layout.layoutMode;
 * ```
 */
export function processCssStyles(cssClasses: string): FigmaStyles {
  // 구현
}
```

## 성능 최적화

### 1. 번들 크기 최적화

- Tree shaking을 위한 ES 모듈 사용
- 불필요한 의존성 제거
- 코드 분할 적용

### 2. 런타임 성능

- 디바운싱을 통한 실시간 업데이트 최적화 (300ms)
- 메모이제이션을 통한 중복 계산 방지
- 가상화를 통한 대용량 데이터 처리

## 보안 고려사항

### 1. 의존성 관리

```bash
# 보안 취약점 검사
pnpm audit

# 의존성 업데이트
pnpm update
```

### 2. 환경 변수

민감한 정보는 환경 변수로 관리하며, `.env.example` 파일을 제공합니다.

## 배포 체크리스트

새로운 릴리즈 전 확인사항:

- [ ] 모든 테스트 통과
- [ ] 타입 검사 통과
- [ ] 린트 검사 통과
- [ ] 문서 업데이트
- [ ] Changeset 생성
- [ ] 브레이킹 체인지 확인
- [ ] 성능 테스트 완료

## 트러블슈팅

### 1. 일반적인 문제

#### Changeset PR이 생성되지 않는 경우
- GitHub Actions 권한 확인
- GITHUB_TOKEN 및 NPM_TOKEN 시크릿 확인
- 수동 PR 생성 후 머지

#### 빌드 실패
- pnpm 버전 확인 (v9 권장)
- 의존성 재설치: `pnpm install --no-frozen-lockfile`
- 타입 오류 확인

#### Figma 플러그인 로드 실패
- manifest.json 설정 확인
- 빌드 출력 파일 경로 확인
- Figma 개발자 모드 활성화

### 2. 디버깅 도구

```bash
# 상세 로그와 함께 빌드
pnpm build --verbose

# 개발 서버 실행
pnpm dev

# 타입 검사만 실행
pnpm type-check
```

## 기여 가이드라인

1. **이슈 생성**: 버그 리포트나 기능 요청은 GitHub 이슈로 생성
2. **브랜치 전략**: `feature/기능명` 또는 `fix/버그명` 형태로 브랜치 생성
3. **커밋 메시지**: Conventional Commits 형식 사용
4. **PR 템플릿**: [.github/pull_request_template.md](mdc:.github/pull_request_template.md) 활용
5. **Changeset 필수**: 패키지 변경 시 반드시 changeset 생성

이 가이드를 따라 일관되고 효율적인 개발 환경을 유지하세요.
